/*
 * Copyright (c) 2019 - 2023  Sambit Paul
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.github.psambit9791.jdsp;

import com.github.psambit9791.jdsp.misc.UtilMethods;
import com.github.psambit9791.jdsp.signal.Generate;
import com.github.psambit9791.jdsp.transform.Hilbert;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.Arrays;

public class TestHilbert {

    private double[] signal1 = {1.   ,  0.702, -0.168, -1.023, -1.148, -0.311,  0.884,  1.373,
            0.596, -0.816, -1.471, -0.607,  0.939,  1.461,  0.303, -1.208,
            -1.219,  0.301,  1.374,  0.576, -0.957, -1.051,  0.363,  1.12 ,
            0.127, -0.955, -0.418,  0.723,  0.534, -0.526, -0.542,  0.397,
            0.499, -0.337, -0.438,  0.332,  0.372, -0.373, -0.292,  0.449,
            0.172, -0.541,  0.026,  0.593, -0.322, -0.502,  0.666,  0.152,
            -0.866,  0.454,  0.633, -1.021,  0.16 ,  0.984, -1.083, -0.023,
            1.18 , -1.191,  0.035,  1.193, -1.382,  0.397,  0.909, -1.499,
            0.979,  0.202, -1.196,  1.392, -0.759, -0.245,  1.033, -1.238,
            0.852, -0.146, -0.529,  0.912, -0.921,  0.63 , -0.196, -0.221,
            0.512, -0.635,  0.602, -0.459,  0.258, -0.046, -0.147,  0.304,
            -0.418,  0.49 , -0.524,  0.525, -0.497,  0.446, -0.377,  0.296,
            -0.207,  0.116, -0.028, -0.053,  0.123, -0.176,  0.21 , -0.219,
            0.201, -0.15 ,  0.063,  0.061, -0.224,  0.422, -0.646,  0.884,
            -1.115,  1.311, -1.442,  1.475, -1.384,  1.154, -0.791,  0.328,
            0.177, -0.641,  0.978, -1.112,  1.007, -0.681,  0.214,  0.268,
            -0.626,  0.755, -0.62 ,  0.281,  0.13 , -0.449,  0.548, -0.388,
            0.045,  0.314, -0.498,  0.387, -0.017, -0.402,  0.573, -0.315,
            -0.248,  0.686, -0.566, -0.122,  0.804, -0.758};

    private double[] signal2 = {0.   ,  0.   ,  0.   ,  0.   , -0.   , -0.   , -0.   , -0.   ,
            -0.   , -0.   , -0.   , -0.   ,  0.   ,  0.   ,  0.   ,  0.   ,
            0.   ,  0.   ,  0.   , -0.   , -0.   , -0.   , -0.   , -0.   ,
            -0.   , -0.   , -0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,
            0.   ,  0.   , -0.   , -0.001, -0.002, -0.003, -0.004, -0.005,
            -0.004, -0.001,  0.004,  0.011,  0.02 ,  0.028,  0.032,  0.03 ,
            0.017, -0.007, -0.042, -0.082, -0.12 , -0.143, -0.141, -0.102,
            -0.025,  0.085,  0.213,  0.331,  0.409,  0.42 ,  0.342,  0.174,
            -0.065, -0.336, -0.587, -0.759, -0.805, -0.701, -0.453, -0.098,
            0.298,  0.659,  0.91 ,  1.   ,  0.91 ,  0.659,  0.298, -0.098,
            -0.453, -0.701, -0.805, -0.759, -0.587, -0.336, -0.065,  0.174,
            0.342,  0.42 ,  0.409,  0.331,  0.213,  0.085, -0.025, -0.102,
            -0.141, -0.143, -0.12 , -0.082, -0.042, -0.007,  0.017,  0.03 ,
            0.032,  0.028,  0.02 ,  0.011,  0.004, -0.001, -0.004, -0.005,
            -0.004, -0.003, -0.002, -0.001, -0.   ,  0.   ,  0.   ,  0.   ,
            0.   ,  0.   ,  0.   ,  0.   , -0.   , -0.   , -0.   , -0.   ,
            -0.   , -0.   , -0.   , -0.   ,  0.   ,  0.   ,  0.   ,  0.   ,
            0.   ,  0.   ,  0.   , -0.   , -0.   , -0.   , -0.   , -0.   ,
            -0.   , -0.   , -0.   ,  0.   ,  0.   ,  0.};

    @Test
    public void testHilbertAmplitudeEnvelope1() {
        double[] result = {1.1989, 1.1646, 0.9854, 1.2155, 1.2632, 1.2619, 1.3624, 1.3877,
                1.4103, 1.4623, 1.4759, 1.4838, 1.5007, 1.5   , 1.4901, 1.4781,
                1.4527, 1.418 , 1.3851, 1.3462, 1.2931, 1.2382, 1.1861, 1.1246,
                1.059 , 1.0026, 0.9422, 0.8706, 0.8107, 0.7666, 0.7117, 0.6481,
                0.6086, 0.5892, 0.5551, 0.5122, 0.4989, 0.5134, 0.5152, 0.4998,
                0.506 , 0.5515, 0.5998, 0.6217, 0.6364, 0.6873, 0.7724, 0.8448,
                0.8804, 0.9095, 0.9753, 1.0734, 1.1601, 1.206 , 1.2227, 1.2531,
                1.3229, 1.4084, 1.468 , 1.4808, 1.4591, 1.4413, 1.457 , 1.4992,
                1.5359, 1.5358, 1.4887, 1.4098, 1.3284, 1.272 , 1.2506, 1.2492,
                1.2421, 1.2089, 1.1412, 1.0411, 0.9239, 0.8073, 0.7105, 0.6506,
                0.6288, 0.6366, 0.6564, 0.6757, 0.6886, 0.6892, 0.6828, 0.6647,
                0.6416, 0.611 , 0.5777, 0.5393, 0.4973, 0.4521, 0.4032, 0.3537,
                0.3004, 0.2499, 0.1999, 0.1657, 0.1525, 0.1763, 0.2291, 0.2971,
                0.3801, 0.4681, 0.5672, 0.6678, 0.7801, 0.8902, 1.0081, 1.1225,
                1.2382, 1.3442, 1.4421, 1.5246, 1.5853, 1.6253, 1.6288, 1.6078,
                1.5419, 1.451 , 1.3211, 1.1749, 1.0172, 0.8691, 0.7664, 0.7105,
                0.7234, 0.7591, 0.7877, 0.7976, 0.7501, 0.6779, 0.5609, 0.4438,
                0.3872, 0.4046, 0.5023, 0.6052, 0.6396, 0.6517, 0.5744, 0.4889,
                0.548 , 0.6863, 0.8547, 1.0855, 0.9561, 0.7818};

        Hilbert h = new Hilbert(this.signal1);
        h.transform();
        h.getOutput();
        double[] out = h.getAmplitudeEnvelope();
        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void testHilbertAmplitudeEnvelope2() {
        double[] result = {0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    ,
                0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    ,
                0.    , 0.0001, 0.    , 0.0001, 0.    , 0.0001, 0.    , 0.0001,
                0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0002, 0.0002, 0.0003,
                0.0004, 0.0005, 0.001 , 0.0019, 0.0023, 0.003 , 0.0041, 0.0059,
                0.008 , 0.01  , 0.0131, 0.0167, 0.0221, 0.028 , 0.0349, 0.0446,
                0.0552, 0.0684, 0.0836, 0.1015, 0.1227, 0.1462, 0.1741, 0.2046,
                0.2383, 0.2766, 0.3182, 0.362 , 0.409 , 0.4597, 0.5116, 0.5646,
                0.6183, 0.6723, 0.7255, 0.7758, 0.8231, 0.8665, 0.9057, 0.9385,
                0.9651, 0.9847, 0.996 , 1.    , 0.996 , 0.9847, 0.9651, 0.9385,
                0.9057, 0.8665, 0.8231, 0.7758, 0.7255, 0.6723, 0.6183, 0.5646,
                0.5116, 0.4597, 0.409 , 0.362 , 0.3182, 0.2766, 0.2383, 0.2046,
                0.1741, 0.1462, 0.1227, 0.1015, 0.0836, 0.0684, 0.0552, 0.0446,
                0.0349, 0.028 , 0.0221, 0.0167, 0.0131, 0.01  , 0.008 , 0.0059,
                0.0041, 0.003 , 0.0023, 0.0019, 0.001 , 0.0005, 0.0004, 0.0003,
                0.0002, 0.0002, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,
                0.    , 0.0001, 0.    , 0.0001, 0.    , 0.0001, 0.    , 0.    ,
                0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    ,
                0.    , 0.    , 0.    , 0.    , 0.    , 0.};

        Hilbert h = new Hilbert(this.signal2);
        h.transform();
        double[] out = h.getAmplitudeEnvelope();
        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void testHilbertInstantaneousPhase1() {
        double[] result = {-0.584,   0.924,   1.742,   2.571,   3.572,   4.463,   5.418,
                6.429,   7.418,   8.446,   9.506,  10.574,  11.672,  12.795,
                13.932,  15.094,  16.283,  17.493,  18.723,  19.978,  21.254,
                22.548,  23.873,  25.223,  26.583,  27.965,  29.385,  30.825,
                32.268,  33.743,  35.263,  36.788,  38.309,  39.879,  41.502,
                43.117,  44.712,  46.366,  48.092,  49.811,  51.489,  53.212,
                55.021,  56.854,  58.65 ,  60.442,  62.301,  64.222,  66.155,
                68.067,  69.98 ,  71.943,  73.966,  76.015,  78.057,  80.092,
                82.151,  84.26 ,  86.418,  88.599,  90.78 ,  92.956,  95.145,
                97.373,  99.651, 101.97 , 104.31 , 106.655, 108.993, 111.333,
                113.696, 116.105, 118.566, 121.072, 123.611, 126.167, 128.726,
                131.271, 133.797, 136.313, 138.849, 141.443, 144.103, 146.831,
                149.61 , 152.434, 155.292, 158.175, 161.083, 164.003, 166.939,
                169.877, 172.824, 175.765, 178.708, 181.633, 184.543, 187.407,
                190.207, 192.882, 195.411, 197.974, 200.651, 203.462, 206.332,
                209.242, 212.169, 215.108, 218.049, 220.988, 223.928, 226.859,
                229.786, 232.701, 235.611, 238.505, 241.393, 244.263, 247.122,
                249.962, 252.783, 255.582, 258.348, 261.081, 263.752, 266.365,
                268.889, 271.361, 273.843, 276.356, 278.937, 281.533, 284.14 ,
                286.732, 289.241, 291.661, 293.855, 295.992, 298.321, 300.716,
                303.19 , 305.641, 307.945, 310.147, 312.119, 314.132, 316.454,
                318.759, 321.014, 323.832};

        Hilbert h = new Hilbert(this.signal1);
        h.transform();

        double[] out = h.getInstantaneousPhase();
        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void testHilbertInstantaneousPhase2() {
        double[] result = {-1.056,  1.571,  1.571,  1.571,  1.571,  1.571,  1.571,  1.571,
                1.571,  1.571,  1.571,  1.571,  1.571,  1.571,  1.571,  1.571,
                1.571,  1.571,  1.571,  1.571,  1.571,  1.571,  1.571,  1.571,
                1.571,  1.571,  1.571,  1.571,  1.571,  1.571,  1.571,  1.571,
                1.571,  1.571,  1.571,  2.141,  2.629,  2.961,  3.326,  3.694,
                4.189,  4.612,  5.023,  5.431,  5.843,  6.293,  6.695,  7.116,
                7.541,  7.957,  8.38 ,  8.795,  9.216,  9.634, 10.051, 10.474,
                10.89 , 11.308, 11.729, 12.149, 12.566, 12.985, 13.405, 13.824,
                14.242, 14.661, 15.08 , 15.499, 15.918, 16.336, 16.755, 17.174,
                17.593, 18.012, 18.431, 18.85 , 19.268, 19.687, 20.106, 20.525,
                20.944, 21.363, 21.781, 22.2  , 22.619, 23.039, 23.457, 23.875,
                24.294, 24.714, 25.133, 25.55 , 25.97 , 26.391, 26.809, 27.225,
                27.648, 28.065, 28.483, 28.904, 29.319, 29.743, 30.158, 30.584,
                31.004, 31.406, 31.856, 32.268, 32.676, 33.087, 33.51 , 34.005,
                34.373, 34.738, 35.07 , 35.558, 36.128, 36.128, 36.128, 36.128,
                36.128, 36.128, 36.128, 36.128, 36.128, 36.128, 36.128, 36.128,
                36.128, 36.128, 36.128, 36.128, 36.128, 36.128, 36.128, 36.128,
                36.128, 36.128, 36.128, 36.128, 36.128, 36.128, 36.128, 36.128,
                36.128, 36.128, 36.128, 36.128, 36.128, 36.128};

        Hilbert h = new Hilbert(this.signal2);
        h.transform();
        double[] out = h.getInstantaneousPhase();
        /// First item removed because atan2 evaluates to undefined
        out = UtilMethods.splitByIndex(out, 1, out.length);
        result = UtilMethods.splitByIndex(result, 1, result.length);
        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void testHilbertInstantaneousFrequency1() {
        double Fs = 150.0;
        double[] result = {36.001, 19.528, 19.791, 23.897, 21.271, 22.799, 24.136, 23.611,
                24.542, 25.306, 25.497, 26.213, 26.81 , 27.144, 27.741, 28.385,
                28.887, 29.364, 29.961, 30.462, 30.892, 31.632, 32.229, 32.468,
                32.993, 33.9  , 34.377, 34.449, 35.213, 36.287, 36.407, 36.311,
                37.481, 38.746, 38.555, 38.078, 39.486, 41.205, 41.038, 40.059,
                41.134, 43.187, 43.76 , 42.876, 42.781, 44.38 , 45.86 , 46.147,
                45.646, 45.67 , 46.863, 48.296, 48.916, 48.749, 48.582, 49.155,
                50.349, 51.518, 52.068, 52.068, 51.948, 52.259, 53.19 , 54.383,
                55.362, 55.863, 55.983, 55.816, 55.863, 56.412, 57.511, 58.752,
                59.826, 60.614, 61.02 , 61.092, 60.757, 60.304, 60.065, 60.543,
                61.927, 63.503, 65.126, 66.344, 67.418, 68.23 , 68.827, 69.423,
                69.71 , 70.092, 70.14 , 70.354, 70.211, 70.259, 69.829, 69.471,
                68.373, 66.845, 63.861, 60.375, 61.187, 63.909, 67.108, 68.516,
                69.471, 69.877, 70.163, 70.211, 70.163, 70.187, 69.972, 69.877,
                69.59 , 69.471, 69.089, 68.946, 68.516, 68.254, 67.8  , 67.346,
                66.821, 66.033, 65.246, 63.765, 62.381, 60.256, 59.015, 59.253,
                59.993, 61.617, 61.975, 62.238, 61.879, 59.898, 57.773, 52.378,
                51.017, 55.601, 57.176, 59.062, 58.513, 55.004, 52.569, 47.078,
                48.057, 55.434, 55.028, 53.834, 67.275};

        Hilbert h = new Hilbert(this.signal1);
        h.transform();
        double[] out = h.getInstantaneousFrequency(Fs);
        Assertions.assertArrayEquals(result, out, 0.025);
    }

    @Test
    public void testHilbertInstantaneousFrequency2() {
        double Fs = 150.0;
        double[] result = {62.7167,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,
                0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,
                0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,
                0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,
                0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,
                0.    ,   0.    ,   0.    ,   0.    ,  13.6054,  11.6669,
                7.9164,   8.7161,   8.7758,  11.8173,  10.1103,   9.8143,
                9.7427,   9.831 ,  10.7382,   9.597 ,  10.0411,  10.1485,
                9.9265,  10.1199,   9.8883,  10.0673,   9.9647,   9.9671,
                10.0864,   9.9504,   9.9647,  10.0506,  10.0363,   9.9528,
                9.9957,  10.0291,  10.0005,   9.9933,   9.979 ,  10.0124,
                10.0101,   9.9981,   9.9862,   9.9957,  10.0053,   9.9933,
                10.0101,  10.0005,   9.9957,   9.9933,  10.0005,  10.0101,
                9.9933,  10.0053,   9.9957,   9.9862,   9.9981,  10.0124,
                10.0101,   9.979 ,   9.9933,  10.0029,  10.0268,   9.9957,
                9.9528,  10.0363,  10.0506,   9.9647,   9.9504,  10.0864,
                9.9671,   9.9647,  10.0673,   9.8883,  10.1199,   9.9289,
                10.1461,  10.0411,   9.597 ,  10.7382,   9.831 ,   9.7427,
                9.8143,  10.1127,  11.8149,   8.7758,   8.7161,   7.9164,
                11.6669,  13.6054,   0.    ,   0.    ,   0.    ,   0.    ,
                0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,
                0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,
                0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,
                0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,
                0.    ,   0.    ,   0.    ,   0.    ,   0.};

        Hilbert h = new Hilbert(this.signal2);
        h.transform();
        double[] out = h.getInstantaneousFrequency(Fs);
        /// First item removed because atan2 evaluates to undefined
        out = UtilMethods.splitByIndex(out, 1, out.length);
        result = UtilMethods.splitByIndex(result, 1, result.length);
        Assertions.assertArrayEquals(result, out, 0.025);
    }

    @Test
    public void FFTHilbertTest1() {
        Generate g = new Generate(-1, 1, 256);
        double[] signal = g.generateGaussianPulse(5)[0];

        Hilbert h = new Hilbert(signal);
        h.transform();

        double[] envelope = h.getAmplitudeEnvelope();
        double[] frequency = h.getInstantaneousFrequency(512);
        double[] phase = h.getInstantaneousPhase();

        double[] resEnv = {0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.00001, 0.00001,
                0.00001, 0.00001, 0.00001, 0.00001, 0.00001, 0.00001, 0.00002,
                0.00002, 0.00002, 0.00002, 0.00003, 0.00003, 0.00003, 0.00004,
                0.00004, 0.00005, 0.00005, 0.00006, 0.00007, 0.00008, 0.00009,
                0.0001 , 0.00011, 0.00012, 0.00013, 0.00015, 0.00017, 0.00019,
                0.00021, 0.00023, 0.00026, 0.00029, 0.00032, 0.00035, 0.00039,
                0.00043, 0.00048, 0.00053, 0.00059, 0.00065, 0.00072, 0.00079,
                0.00087, 0.00096, 0.00106, 0.00117, 0.00129, 0.00142, 0.00156,
                0.00171, 0.00188, 0.00206, 0.00225, 0.00247, 0.0027 , 0.00296,
                0.00323, 0.00353, 0.00385, 0.0042 , 0.00458, 0.00499, 0.00543,
                0.00591, 0.00642, 0.00697, 0.00757, 0.00821, 0.0089 , 0.00964,
                0.01044, 0.0113 , 0.01221, 0.01319, 0.01424, 0.01537, 0.01657,
                0.01785, 0.01922, 0.02068, 0.02223, 0.02389, 0.02565, 0.02752,
                0.02951, 0.03162, 0.03385, 0.03623, 0.03874, 0.04139, 0.0442 ,
                0.04717, 0.0503 , 0.05361, 0.05709, 0.06075, 0.06461, 0.06867,
                0.07293, 0.0774 , 0.08209, 0.087  , 0.09215, 0.09753, 0.10316,
                0.10903, 0.11516, 0.12156, 0.12822, 0.13515, 0.14236, 0.14986,
                0.15764, 0.16571, 0.17407, 0.18273, 0.1917 , 0.20096, 0.21053,
                0.2204 , 0.23058, 0.24106, 0.25184, 0.26293, 0.27432, 0.28601,
                0.29799, 0.31026, 0.32282, 0.33565, 0.34876, 0.36212, 0.37575,
                0.38962, 0.40373, 0.41806, 0.4326 , 0.44735, 0.46228, 0.47738,
                0.49264, 0.50803, 0.52356, 0.53918, 0.5549 , 0.57068, 0.5865 ,
                0.60236, 0.61822, 0.63407, 0.64987, 0.66562, 0.68128, 0.69683,
                0.71225, 0.72751, 0.74259, 0.75747, 0.77211, 0.78651, 0.80062,
                0.81442, 0.8279 , 0.84103, 0.85378, 0.86613, 0.87806, 0.88955,
                0.90057, 0.9111 , 0.92112, 0.93062, 0.93958, 0.94797, 0.95578,
                0.963  , 0.96961, 0.97559, 0.98095, 0.98566, 0.98971, 0.9931 ,
                0.99582, 0.99786, 0.99923, 0.99991, 0.99991, 0.99923, 0.99786,
                0.99582, 0.9931 , 0.98971, 0.98566, 0.98095, 0.97559, 0.96961,
                0.963  , 0.95578, 0.94797, 0.93958, 0.93062, 0.92112, 0.9111 ,
                0.90057, 0.88955, 0.87806, 0.86613, 0.85378, 0.84103, 0.8279 ,
                0.81442, 0.80062, 0.78651, 0.77211, 0.75747, 0.74259, 0.72751,
                0.71225, 0.69683, 0.68128, 0.66562, 0.64987, 0.63407, 0.61822,
                0.60236, 0.5865 , 0.57068, 0.5549 , 0.53918, 0.52356, 0.50803,
                0.49264, 0.47738, 0.46228, 0.44735, 0.4326 , 0.41806, 0.40373,
                0.38962, 0.37575, 0.36212, 0.34876, 0.33565, 0.32282, 0.31026,
                0.29799, 0.28601, 0.27432, 0.26293, 0.25184, 0.24106, 0.23058,
                0.2204 , 0.21053, 0.20096, 0.1917 , 0.18273, 0.17407, 0.16571,
                0.15764, 0.14986, 0.14236, 0.13515, 0.12822, 0.12156, 0.11516,
                0.10903, 0.10316, 0.09753, 0.09215, 0.087  , 0.08209, 0.0774 ,
                0.07293, 0.06867, 0.06461, 0.06075, 0.05709, 0.05361, 0.0503 ,
                0.04717, 0.0442 , 0.04139, 0.03874, 0.03623, 0.03385, 0.03162,
                0.02951, 0.02752, 0.02565, 0.02389, 0.02223, 0.02068, 0.01922,
                0.01785, 0.01657, 0.01537, 0.01424, 0.01319, 0.01221, 0.0113 ,
                0.01044, 0.00964, 0.0089 , 0.00821, 0.00757, 0.00697, 0.00642,
                0.00591, 0.00543, 0.00499, 0.00458, 0.0042 , 0.00385, 0.00353,
                0.00323, 0.00296, 0.0027 , 0.00247, 0.00225, 0.00206, 0.00188,
                0.00171, 0.00156, 0.00142, 0.00129, 0.00117, 0.00106, 0.00096,
                0.00087, 0.00079, 0.00072, 0.00065, 0.00059, 0.00053, 0.00048,
                0.00043, 0.00039, 0.00035, 0.00032, 0.00029, 0.00026, 0.00023,
                0.00021, 0.00019, 0.00017, 0.00015, 0.00013, 0.00012, 0.00011,
                0.0001 , 0.00009, 0.00008, 0.00007, 0.00006, 0.00005, 0.00005,
                0.00004, 0.00004, 0.00003, 0.00003, 0.00003, 0.00002, 0.00002,
                0.00002, 0.00002, 0.00001, 0.00001, 0.00001, 0.00001, 0.00001,
                0.00001, 0.00001, 0.00001, 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0};
        double[] resFreq = {-3.22017, -0.63307, -0.26777, -0.15082, -0.10348, -0.08452,
                -0.08053, -0.0862 , -0.09926, -0.11872, -0.14417, -0.17549,
                -0.21264, -0.25558, -0.30415, -0.35796, -0.41635, -0.47826,
                -0.54212, -0.60579, -0.66644, -0.72055, -0.76387, -0.7915 ,
                -0.79807, -0.77798, -0.72574, -0.63638, -0.50582, -0.33124,
                -0.11126,  0.15401,  0.46308,  0.81341,  1.20179,  1.62481,
                2.07927,  2.56259,  3.07303,  3.60992,  4.17366,  4.76574,
                5.38853,  6.04498,  6.73807,  7.46999,  8.24093,  9.0473 ,
                9.87955, 10.71979, 11.53989, 12.30142, 12.95883, 13.4668 ,
                13.79049, 13.91531, 13.85138, 13.63056, 13.29758, 12.89938,
                12.47703, 12.06155, 11.67344, 11.3242 , 11.01868, 10.75727,
                10.53771, 10.35632, 10.20884, 10.09094,  9.99848,  9.92764,
                9.87503,  9.83764,  9.81284,  9.79836,  9.79222,  9.79273,
                9.79846,  9.80816,  9.82078,  9.83544,  9.8514 ,  9.86805,
                9.88487,  9.90146,  9.9175 ,  9.93274,  9.94701,  9.96017,
                9.97216,  9.98292,  9.99246, 10.0008 , 10.00799, 10.01408,
                10.01915, 10.02328, 10.02656, 10.02907, 10.03091, 10.03216,
                10.03291, 10.03322, 10.03318, 10.03286, 10.0323 , 10.03157,
                10.03071, 10.02977, 10.02878, 10.02776, 10.02675, 10.02577,
                10.02483, 10.02394, 10.02311, 10.02235, 10.02166, 10.02105,
                10.02051, 10.02004, 10.01964, 10.0193 , 10.01903, 10.01881,
                10.01864, 10.01852, 10.01844, 10.01839, 10.01837, 10.01838,
                10.01841, 10.01846, 10.01852, 10.0186 , 10.01868, 10.01876,
                10.01885, 10.01894, 10.01902, 10.01911, 10.01919, 10.01926,
                10.01933, 10.0194 , 10.01946, 10.01951, 10.01955, 10.01959,
                10.01963, 10.01965, 10.01968, 10.01969, 10.01971, 10.01972,
                10.01972, 10.01972, 10.01972, 10.01972, 10.01971, 10.0197 ,
                10.01969, 10.01968, 10.01967, 10.01966, 10.01965, 10.01964,
                10.01963, 10.01962, 10.01961, 10.0196 , 10.01959, 10.01958,
                10.01957, 10.01957, 10.01956, 10.01956, 10.01955, 10.01955,
                10.01955, 10.01954, 10.01954, 10.01954, 10.01954, 10.01954,
                10.01954, 10.01954, 10.01955, 10.01955, 10.01955, 10.01955,
                10.01955, 10.01955, 10.01956, 10.01956, 10.01956, 10.01956,
                10.01956, 10.01957, 10.01957, 10.01957, 10.01957, 10.01957,
                10.01957, 10.01957, 10.01958, 10.01958, 10.01958, 10.01958,
                10.01958, 10.01958, 10.01958, 10.01958, 10.01958, 10.01958,
                10.01957, 10.01957, 10.01957, 10.01957, 10.01957, 10.01957,
                10.01957, 10.01957, 10.01957, 10.01957, 10.01957, 10.01957,
                10.01957, 10.01957, 10.01957, 10.01957, 10.01957, 10.01957,
                10.01957, 10.01957, 10.01957, 10.01957, 10.01957, 10.01957,
                10.01957, 10.01957, 10.01957, 10.01957, 10.01957, 10.01957,
                10.01957, 10.01957, 10.01957, 10.01957, 10.01957, 10.01957,
                10.01957, 10.01957, 10.01957, 10.01957, 10.01957, 10.01957,
                10.01957, 10.01957, 10.01957, 10.01957, 10.01957, 10.01957,
                10.01957, 10.01957, 10.01957, 10.01957, 10.01957, 10.01957,
                10.01957, 10.01957, 10.01957, 10.01957, 10.01957, 10.01957,
                10.01957, 10.01957, 10.01957, 10.01957, 10.01957, 10.01957,
                10.01957, 10.01957, 10.01957, 10.01957, 10.01957, 10.01957,
                10.01957, 10.01957, 10.01957, 10.01957, 10.01957, 10.01957,
                10.01957, 10.01958, 10.01958, 10.01958, 10.01958, 10.01958,
                10.01958, 10.01958, 10.01958, 10.01958, 10.01958, 10.01957,
                10.01957, 10.01957, 10.01957, 10.01957, 10.01957, 10.01957,
                10.01956, 10.01956, 10.01956, 10.01956, 10.01956, 10.01955,
                10.01955, 10.01955, 10.01955, 10.01955, 10.01955, 10.01954,
                10.01954, 10.01954, 10.01954, 10.01954, 10.01954, 10.01954,
                10.01955, 10.01955, 10.01955, 10.01956, 10.01956, 10.01957,
                10.01957, 10.01958, 10.01959, 10.0196 , 10.01961, 10.01962,
                10.01963, 10.01964, 10.01965, 10.01966, 10.01967, 10.01968,
                10.01969, 10.0197 , 10.01971, 10.01972, 10.01972, 10.01972,
                10.01972, 10.01972, 10.01971, 10.01969, 10.01968, 10.01965,
                10.01963, 10.01959, 10.01955, 10.01951, 10.01946, 10.0194 ,
                10.01933, 10.01926, 10.01919, 10.01911, 10.01902, 10.01894,
                10.01885, 10.01876, 10.01868, 10.0186 , 10.01852, 10.01846,
                10.01841, 10.01838, 10.01837, 10.01839, 10.01844, 10.01852,
                10.01864, 10.01881, 10.01903, 10.0193 , 10.01964, 10.02004,
                10.02051, 10.02105, 10.02166, 10.02235, 10.02311, 10.02394,
                10.02483, 10.02577, 10.02675, 10.02776, 10.02878, 10.02977,
                10.03071, 10.03157, 10.0323 , 10.03286, 10.03318, 10.03322,
                10.03291, 10.03216, 10.03091, 10.02907, 10.02656, 10.02328,
                10.01915, 10.01408, 10.00799, 10.0008 ,  9.99246,  9.98292,
                9.97216,  9.96017,  9.94701,  9.93274,  9.9175 ,  9.90146,
                9.88487,  9.86805,  9.8514 ,  9.83544,  9.82078,  9.80816,
                9.79846,  9.79273,  9.79222,  9.79836,  9.81284,  9.83764,
                9.87503,  9.92764,  9.99848, 10.09094, 10.20884, 10.35632,
                10.53771, 10.75727, 11.01868, 11.3242 , 11.67344, 12.06155,
                12.47703, 12.89938, 13.29758, 13.63056, 13.85138, 13.91531,
                13.79049, 13.4668 , 12.95883, 12.30142, 11.53989, 10.71979,
                9.87955,  9.0473 ,  8.24093,  7.46999,  6.73807,  6.04498,
                5.38853,  4.76574,  4.17366,  3.60992,  3.07303,  2.56259,
                2.07927,  1.62481,  1.20179,  0.81341,  0.46308,  0.15401,
                -0.11126, -0.33124, -0.50582, -0.63638, -0.72574, -0.77798,
                -0.79807, -0.7915 , -0.76387, -0.72055, -0.66644, -0.60579,
                -0.54212, -0.47826, -0.41635, -0.35796, -0.30415, -0.25558,
                -0.21264, -0.17549, -0.14417, -0.11872, -0.09926, -0.0862 ,
                -0.08053, -0.08452, -0.10348, -0.15082, -0.26777, -0.63307,
                -3.22017};
        double[] resPhase = {-1.50544, -1.54496, -1.55273, -1.55602, -1.55787, -1.55914,
                -1.56017, -1.56116, -1.56222, -1.56344, -1.56489, -1.56666,
                -1.56882, -1.57143, -1.57456, -1.5783 , -1.58269, -1.5878 ,
                -1.59367, -1.60032, -1.60775, -1.61593, -1.62478, -1.63415,
                -1.64386, -1.65366, -1.6632 , -1.67211, -1.67992, -1.68613,
                -1.69019, -1.69156, -1.68967, -1.68398, -1.674  , -1.65925,
                -1.63931, -1.6138 , -1.58235, -1.54464, -1.50034, -1.44912,
                -1.39063, -1.32451, -1.25032, -1.16764, -1.07597, -0.97483,
                -0.86381, -0.74257, -0.61101, -0.4694 , -0.31844, -0.15941,
                0.00585,  0.17509,  0.34585,  0.51584,  0.68311,  0.84629,
                1.00459,  1.15771,  1.30573,  1.44898,  1.58795,  1.72317,
                1.85518,  1.9845 ,  2.11159,  2.23687,  2.36071,  2.48341,
                2.60524,  2.72642,  2.84715,  2.96757,  3.08781,  3.20798,
                3.32816,  3.4484 ,  3.56877,  3.68929,  3.80998,  3.93088,
                4.05198,  4.17328,  4.29479,  4.4165 ,  4.53839,  4.66046,
                4.78269,  4.90507,  5.02758,  5.1502 ,  5.27293,  5.39575,
                5.51864,  5.64159,  5.7646 ,  5.88764,  6.01071,  6.13381,
                6.25693,  6.38005,  6.50317,  6.6263 ,  6.74942,  6.87254,
                6.99564,  7.11874,  7.24182,  7.36489,  7.48795,  7.611  ,
                7.73403,  7.85706,  7.98007,  8.10307,  8.22606,  8.34905,
                8.47203,  8.595  ,  8.71796,  8.84092,  8.96387,  9.08683,
                9.20978,  9.33272,  9.45567,  9.57861,  9.70156,  9.8245 ,
                9.94745, 10.07039, 10.19334, 10.31628, 10.43923, 10.56218,
                10.68512, 10.80807, 10.93102, 11.05398, 11.17693, 11.29988,
                11.42284, 11.54579, 11.66875, 11.79171, 11.91467, 12.03762,
                12.16058, 12.28354, 12.4065 , 12.52946, 12.65242, 12.77538,
                12.89834, 13.0213 , 13.14426, 13.26722, 13.39018, 13.51314,
                13.63611, 13.75907, 13.88203, 14.00499, 14.12794, 14.2509 ,
                14.37386, 14.49682, 14.61978, 14.74274, 14.8657 , 14.98866,
                15.11162, 15.23458, 15.35754, 15.48049, 15.60345, 15.72641,
                15.84937, 15.97233, 16.09529, 16.21824, 16.3412 , 16.46416,
                16.58712, 16.71008, 16.83304, 16.95599, 17.07895, 17.20191,
                17.32487, 17.44783, 17.57079, 17.69374, 17.8167 , 17.93966,
                18.06262, 18.18558, 18.30854, 18.4315 , 18.55445, 18.67741,
                18.80037, 18.92333, 19.04629, 19.16925, 19.29221, 19.41516,
                19.53812, 19.66108, 19.78404, 19.907  , 20.02996, 20.15292,
                20.27588, 20.39883, 20.52179, 20.64475, 20.76771, 20.89067,
                21.01363, 21.13659, 21.25955, 21.3825 , 21.50546, 21.62842,
                21.75138, 21.87434, 21.9973 , 22.12026, 22.24321, 22.36617,
                22.48913, 22.61209, 22.73505, 22.85801, 22.98097, 23.10392,
                23.22688, 23.34984, 23.4728 , 23.59576, 23.71872, 23.84168,
                23.96463, 24.08759, 24.21055, 24.33351, 24.45647, 24.57943,
                24.70239, 24.82534, 24.9483 , 25.07126, 25.19422, 25.31718,
                25.44014, 25.5631 , 25.68606, 25.80901, 25.93197, 26.05493,
                26.17789, 26.30085, 26.42381, 26.54677, 26.66972, 26.79268,
                26.91564, 27.0386 , 27.16156, 27.28452, 27.40748, 27.53043,
                27.65339, 27.77635, 27.89931, 28.02227, 28.14523, 28.26819,
                28.39114, 28.5141 , 28.63706, 28.76002, 28.88298, 29.00594,
                29.1289 , 29.25185, 29.37481, 29.49777, 29.62073, 29.74369,
                29.86665, 29.98961, 30.11257, 30.23552, 30.35848, 30.48144,
                30.6044 , 30.72736, 30.85032, 30.97328, 31.09623, 31.21919,
                31.34215, 31.46511, 31.58807, 31.71103, 31.83399, 31.95695,
                32.0799 , 32.20286, 32.32582, 32.44878, 32.57174, 32.6947 ,
                32.81766, 32.94061, 33.06357, 33.18653, 33.30949, 33.43245,
                33.55541, 33.67836, 33.80132, 33.92428, 34.04724, 34.1702 ,
                34.29315, 34.41611, 34.53907, 34.66203, 34.78499, 34.90795,
                35.03091, 35.15386, 35.27682, 35.39978, 35.52274, 35.6457 ,
                35.76866, 35.89162, 36.01458, 36.13754, 36.2605 , 36.38346,
                36.50642, 36.62938, 36.75234, 36.8753 , 36.99826, 37.12122,
                37.24418, 37.36714, 37.4901 , 37.61306, 37.73602, 37.85898,
                37.98194, 38.1049 , 38.22786, 38.35082, 38.47377, 38.59673,
                38.71969, 38.84264, 38.9656 , 39.08855, 39.21151, 39.33446,
                39.45741, 39.58036, 39.70331, 39.82625, 39.9492 , 40.07215,
                40.19509, 40.31804, 40.44098, 40.56392, 40.68687, 40.80981,
                40.93276, 41.05571, 41.17866, 41.30161, 41.42456, 41.54752,
                41.67049, 41.79346, 41.91643, 42.03942, 42.16241, 42.28541,
                42.40843, 42.53145, 42.65448, 42.77753, 42.90059, 43.02366,
                43.14674, 43.26984, 43.39295, 43.51606, 43.63918, 43.76231,
                43.88543, 44.00856, 44.13167, 44.25477, 44.37784, 44.50089,
                44.62389, 44.74684, 44.86974, 44.99255, 45.11528, 45.23791,
                45.36042, 45.48279, 45.60502, 45.72709, 45.84898, 45.97069,
                46.0922 , 46.2135 , 46.3346 , 46.4555 , 46.5762 , 46.69672,
                46.81708, 46.93733, 47.0575 , 47.17767, 47.29791, 47.41833,
                47.53906, 47.66025, 47.78208, 47.90478, 48.02861, 48.15389,
                48.28098, 48.4103 , 48.54231, 48.67753, 48.8165 , 48.95975,
                49.10777, 49.26089, 49.41919, 49.58237, 49.74965, 49.91963,
                50.09039, 50.25963, 50.42489, 50.58392, 50.73488, 50.8765 ,
                51.00805, 51.12929, 51.24032, 51.34145, 51.43312, 51.51581,
                51.58999, 51.65612, 51.7146 , 51.76582, 51.81012, 51.84783,
                51.87928, 51.9048 , 51.92474, 51.93948, 51.94947, 51.95515,
                51.95704, 51.95567, 51.95161, 51.9454 , 51.93759, 51.92869,
                51.91914, 51.90934, 51.89963, 51.89026, 51.88142, 51.87324,
                51.8658 , 51.85915, 51.85328, 51.84817, 51.84378, 51.84005,
                51.83691, 51.8343 , 51.83215, 51.83038, 51.82892, 51.8277 ,
                51.82664, 51.82566, 51.82462, 51.82335, 51.8215 , 51.81821,
                51.81044, 51.77093};

        Assertions.assertArrayEquals(envelope, resEnv, 0.001);
        Assertions.assertArrayEquals(phase, resPhase, 0.001);
        Assertions.assertArrayEquals(frequency, resFreq, 0.001);
    }

    @Test
    public void FFTHilbertTest2() {
        Generate g = new Generate(-1, 1, 156);
        double[] signal = g.generateGaussianPulse(20)[0];

        Hilbert h = new Hilbert(signal);
        h.transform();

        double[] envelope = h.getAmplitudeEnvelope();
        double[] frequency = h.getInstantaneousFrequency(312);
        double[] phase = h.getInstantaneousPhase();

        double[] resEnv = {0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.00001, 0.00001, 0.00003, 0.00007, 0.00014, 0.00029,
                0.00056, 0.00108, 0.00201, 0.00364, 0.00637, 0.01085, 0.01792,
                0.02875, 0.04479, 0.06773, 0.09945, 0.14176, 0.1962 , 0.26364,
                0.34394, 0.43564, 0.53573, 0.63964, 0.74146, 0.83447, 0.91181,
                0.96731, 0.99631, 0.99631, 0.96731, 0.91181, 0.83447, 0.74146,
                0.63964, 0.53573, 0.43564, 0.34394, 0.26364, 0.1962 , 0.14176,
                0.09945, 0.06773, 0.04479, 0.02875, 0.01792, 0.01085, 0.00637,
                0.00364, 0.00201, 0.00108, 0.00056, 0.00029, 0.00014, 0.00007,
                0.00003, 0.00001, 0.00001, 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
                0.};
        double[] resFreq = {-0.     ,   0.     ,   0.     ,  -0.     ,   0.     ,  -0.     ,
                0.     ,   0.     ,  -0.     ,  -0.     ,   0.     ,  -0.     ,
                0.     ,  -0.     ,   0.     ,   0.     ,  -0.     ,  -0.     ,
                0.     ,   0.     ,   0.     ,  -0.     ,   0.     ,   0.     ,
                -0.     ,   0.     ,  -0.     ,   0.     ,   0.     ,  -0.     ,
                0.     ,  -0.     ,  -0.     ,   0.     ,   0.     ,  -0.     ,
                0.     ,   0.     ,  -0.     ,  -0.     ,  -0.     ,   0.     ,
                0.     ,  -0.     ,  -0.     ,   0.     ,  -0.     ,   0.     ,
                0.     ,  -0.     ,   0.     ,  -0.     ,  -0.     ,   0.     ,
                -0.     ,   0.     ,  -0.     ,  -0.     ,   0.     ,  -0.     ,
                -0.     ,   0.     ,   0.     ,  -0.     ,  -0.     ,   0.     ,
                0.     ,  -0.     ,   0.     ,   0.     ,   0.     ,  -0.     ,
                0.     ,  -0.     ,   0.     ,   0.     ,  -0.     ,  -0.     ,
                0.     ,  -0.     ,   0.     ,   0.     ,  -0.     ,   0.     ,
                -0.     ,  -0.     ,   0.     ,  -0.     ,   0.     ,  -0.     ,
                0.     ,   0.     ,  -0.     ,  -0.     ,   0.     ,   0.     ,
                0.     ,  -0.     ,   0.     ,  -0.     ,  -0.     ,   0.     ,
                -0.     ,   0.     ,   0.     ,  -0.     ,   0.     ,   0.     ,
                0.     ,   0.     ,  -0.     ,  -0.00002,  -0.00008,  -0.00009,
                0.00051,   0.00318,   0.00846,   0.00499,  -0.05564,  -0.25975,
                -0.53459,  -0.01656,   3.3225 ,  11.44535,  29.8802 ,  85.90329,
                59.01942,  38.24705,  37.29787,  38.62621,  39.69772,  40.17109,
                40.25866,  40.20953,  40.15361,  40.1253 ,  40.11896,  40.12205,
                40.12639,  40.12898,  40.1297 ,  40.12943,  40.12892,  40.12856,
                40.12844,  40.12847,  40.12856,  40.12863,  40.12866,  40.12865,
                40.12863,  40.12861,  40.12861,  40.12861,  40.12862,  40.12862,
                40.12862,  40.12861,  40.12861,  40.12861,  40.12863,  40.12865,
                40.12866,  40.12863,  40.12856,  40.12847,  40.12844,  40.12856,
                40.12892,  40.12943,  40.1297 ,  40.12898,  40.12639,  40.12205,
                40.11896,  40.1253 ,  40.15361,  40.20953,  40.25866,  40.17109,
                39.69772,  38.62621,  37.29787,  38.24705,  59.01942,  85.90329,
                29.8802 ,  11.44535,   3.3225 ,  -0.01656,  -0.53459,  -0.25975,
                -0.05564,   0.00499,   0.00846,   0.00318,   0.00051,  -0.00009,
                -0.00008,  -0.00002,  -0.     ,   0.     ,   0.     ,   0.     ,
                0.     ,  -0.     ,  -0.     ,   0.     ,  -0.     ,  -0.     ,
                0.     ,  -0.     ,  -0.     ,  -0.     ,   0.     ,  -0.     ,
                0.     ,  -0.     ,   0.     ,  -0.     ,   0.     ,  -0.     ,
                0.     ,   0.     ,   0.     ,   0.     ,  -0.     ,   0.     ,
                -0.     ,  -0.     ,  -0.     ,   0.     ,   0.     ,   0.     ,
                -0.     ,   0.     ,  -0.     ,  -0.     ,   0.     ,  -0.     ,
                0.     ,   0.     ,   0.     ,  -0.     ,  -0.     ,   0.     ,
                0.     ,  -0.     ,   0.     ,   0.     ,   0.     ,  -0.     ,
                0.     ,   0.     ,  -0.     ,   0.     ,   0.     ,  -0.     ,
                0.     ,  -0.     ,  -0.     ,   0.     ,  -0.     ,   0.     ,
                0.     ,  -0.     ,   0.     ,   0.     ,  -0.     ,  -0.     ,
                -0.     ,  -0.     ,   0.     ,   0.     ,   0.     ,  -0.     ,
                -0.     ,  -0.     ,  -0.     ,   0.     ,  -0.     ,   0.     ,
                -0.     ,   0.     ,   0.     ,   0.     ,   0.     ,  -0.     ,
                0.     ,   0.     ,  -0.     ,   0.     ,  -0.     ,  -0.     ,
                0.     ,  -0.     ,   0.     ,  -0.     ,  -0.     ,   0.     ,
                -0.     ,  -0.     ,   0.     ,  -0.     ,   0.     ,  -0.     ,
                0.     ,   0.     ,  -0.     ,   0.     ,   0.     ,  -0.     ,
                0.     ,  -0.     ,   0.     ,  -0.     ,   0.     ,  -0.     ,
                -0.     ,   0.     ,  -0.     ,  -0.     ,   0.     ,  -0.     ,
                0.     ,  -0.     ,   0.     ,   0.     ,  -0.     ,  -0.     ,
                -0.     ,  -0.     ,   0.     ,  -0.     ,   0.     ,  -0.     ,
                -0.     ,   0.     ,  -0.     ,   0.     ,   0.     ,  -0.     ,
                0.     ,  -0.     ,  -0.     ,   0.     ,   0.     ,  -0.     ,
                -0.     ,   0.     ,   0.     ,  -0.     ,  -0.     ,  -0.     ,
                0.     ,  -0.     ,   0.     ,   0.     ,   0.     ,  -0.     ,
                0.     ,  -0.     ,   0.     ,  -0.     ,  -0.     ,   0.     ,
                0.     ,  -0.     ,   0.     ,  -0.     ,  -0.     ,   0.     ,
                0.     ,   0.     ,   0.     ,  -0.     ,   0.     ,  -0.     ,
                -0.     ,   0.     ,   0.     ,   0.     ,  -0.     ,   0.     ,
                -0.     ,  -0.     ,  -0.     ,  -0.     ,   0.     ,   0.     ,
                -0.     ,   0.     ,  -0.     ,   0.     ,  -0.     ,  -0.     ,
                0.     ,  -0.     ,  -0.     ,   0.     ,  -0.     ,   0.     ,
                -0.     ,   0.     ,   0.     ,   0.     ,  -0.     ,   0.     ,
                -0.     ,   0.     ,   0.     , 156.     ,   0.     ,   0.     ,
                -0.     ,   0.     ,   0.     ,   0.     ,   0.     ,   0.     ,
                -0.     ,  -0.     ,   0.     ,   0.     ,   0.     ,   0.     ,
                -0.     ,  -0.     ,  -0.     ,  -0.     ,   0.     ,   0.     ,
                -0.     ,   0.     ,   0.     ,  -0.     ,   0.     ,  -0.     ,
                -0.     ,   0.     ,  -0.     ,   0.     ,   0.     ,  -0.     ,
                -0.     ,   0.     ,  -0.     ,   0.     ,  -0.     ,  -0.     ,
                0.     ,  -0.     ,  -0.     ,   0.     ,  -0.     ,   0.     ,
                0.     ,  -0.     ,   0.     ,   0.     ,  -0.     ,   0.     ,
                -0.     ,   0.     ,   0.     ,  -0.     ,   0.     ,   0.     ,
                -0.     ,   0.     ,   0.     ,  -0.     ,   0.     ,  -0.     ,
                0.     ,   0.     ,  -0.     ,   0.     ,   0.     ,   0.     ,
                -0.     ,   0.     ,   0.     ,  -0.     ,  -0.     ,   0.     ,
                -0.     ,   0.     ,   0.     ,   0.     ,   0.     ,  -0.     ,
                -0.     ,  -0.     ,   0.     ,   0.     ,   0.     ,   0.     ,
                0.     ,  -0.     ,   0.     ,  -0.     ,  -0.     ,   0.     ,
                -0.     ,   0.     ,   0.     ,  -0.     ,   0.     ,  -0.     ,
                0.};
        double[] resPhase = {-1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 ,
                -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 ,
                -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 ,
                -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 ,
                -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 ,
                -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 ,
                -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 ,
                -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 ,
                -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 ,
                -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 ,
                -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 ,
                -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 ,
                -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 ,
                -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 ,
                -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 ,
                -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 ,
                -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 ,
                -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 ,
                -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 , -1.5708 ,
                -1.5708 , -1.57079, -1.57073, -1.57056, -1.57045, -1.57158,
                -1.57681, -1.58757, -1.58791, -1.521  , -1.2905 , -0.68876,
                1.04119,  2.22975,  2.99998,  3.7511 ,  4.52897,  5.32842,
                6.13741,  6.94815,  7.75791,  8.56654,  9.3746 , 10.18253,
                10.99052, 11.79861, 12.60674, 13.41489, 14.22303, 15.03116,
                15.83929, 16.64741, 17.45554, 18.26366, 19.07179, 19.87992,
                20.68804, 21.49617, 22.3043 , 23.11242, 23.92055, 24.72868,
                25.5368 , 26.34493, 27.15306, 27.96118, 28.76931, 29.57744,
                30.38557, 31.19369, 32.00182, 32.80995, 33.61807, 34.42619,
                35.23432, 36.04245, 36.85059, 37.65874, 38.46688, 39.27496,
                40.08295, 40.89089, 41.69894, 42.50758, 43.31733, 44.12808,
                44.93706, 45.73651, 46.51438, 47.2655 , 48.03573, 49.22429,
                50.95425, 51.55599, 51.78648, 51.85339, 51.85305, 51.84229,
                51.83706, 51.83594, 51.83604, 51.83621, 51.83627, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 51.83628, 51.83628,
                51.83628, 51.83628, 51.83628, 51.83628, 54.97787, 54.97787,
                54.97787, 54.97787, 54.97787, 54.97787, 54.97787, 54.97787,
                54.97787, 54.97787, 54.97787, 54.97787, 54.97787, 54.97787,
                54.97787, 54.97787, 54.97787, 54.97787, 54.97787, 54.97787,
                54.97787, 54.97787, 54.97787, 54.97787, 54.97787, 54.97787,
                54.97787, 54.97787, 54.97787, 54.97787, 54.97787, 54.97787,
                54.97787, 54.97787, 54.97787, 54.97787, 54.97787, 54.97787,
                54.97787, 54.97787, 54.97787, 54.97787, 54.97787, 54.97787,
                54.97787, 54.97787, 54.97787, 54.97787, 54.97787, 54.97787,
                54.97787, 54.97787, 54.97787, 54.97787, 54.97787, 54.97787,
                54.97787, 54.97787, 54.97787, 54.97787, 54.97787, 54.97787,
                54.97787, 54.97787, 54.97787, 54.97787, 54.97787, 54.97787,
                54.97787, 54.97787, 54.97787, 54.97787, 54.97787, 54.97787,
                54.97787, 54.97787, 54.97787, 54.97787, 54.97787, 54.97787,
                54.97787, 54.97787, 54.97787, 54.97787, 54.97787, 54.97787,
                54.97787, 54.97787, 54.97787, 54.97787, 54.97787, 54.97787,
                54.97787, 54.97787, 54.97787, 54.97787, 54.97787, 54.97787,
                54.97787, 54.97787};

        Assertions.assertArrayEquals(envelope, resEnv, 0.001);
        Assertions.assertArrayEquals(phase, resPhase, 0.001);
        Assertions.assertArrayEquals(frequency, resFreq, 0.001);
    }

    @Test
    public void FFTHilbertLongTest() {
        double[] signal_250 = {0.65570176,  0.14072631,  0.10250026, -1.53794427,  1.32325281, 0.72635915,  0.25936968,  1.9458381 ,  1.00181599, -0.61522368, -1.06965248,  0.53570179,  1.19251974,  1.73674066, -0.81601573, 0.52638129, -0.7184321 ,  1.31681521,  0.07938202, -0.61275756, 0.68725145,  0.68623102,  0.97276792, -0.34033366,  1.8578501 , -1.20230194, -0.64325646,  0.56860351,  1.51811895,  1.25739071, -1.15249821, -0.67536122, -0.5179158 ,  0.33736464, -0.0547609 , 1.41480174, -0.50786947,  1.46466113,  0.88477089,  0.11163781, -0.12063323,  0.9756998 , -0.93705231,  2.02384912,  0.50605046, 1.29155086,  1.4987394 ,  0.38710978, -0.81185849, -0.38472373, 0.86428908, -0.92625414, -0.69496954, -0.46811194,  0.29691729, -1.39466661, -0.34539696, -0.31381791,  1.27811298, -1.19467208, 0.86184656,  1.12221348, -0.50422792,  0.52569367, -0.69349256, 0.98088658, -0.07227569,  0.52022134,  1.96400089, -0.27061041, -0.2796634 ,  0.66725972, -0.56081745,  0.61968707,  0.17047406, 0.19034675,  0.44272961, -0.18190086, -0.1805094 , -0.70831218, 1.36949347,  1.81841681,  1.74292109,  0.15609589,  0.57620182, 0.43127322,  0.28955073,  0.08033154,  1.13601206,  0.83174028, 1.38157541,  0.37214721,  0.05648272, -1.42780283,  0.17966294, -0.28342117,  0.16444715,  1.49611564,  0.14820913, -0.72218993, -1.51734123, -2.11752933, -0.31852384, -0.21457682, -0.47504839, -1.5016179 ,  0.58555483,  0.10944522, -1.04568309,  1.97714984, -1.00579457, -0.07061853, -2.95132526,  0.38027712, -0.20825769, -0.61969294, -0.22213952, -1.0553604 , -1.27379545, -0.95783597, 1.58923147, -0.17091477, -0.94222965, -0.05327611, -2.5583264 , -0.38297139,  2.55302446,  0.53574272, -0.25199318,  1.01382265, 0.26852574, -0.52878655,  0.20275857,  1.34421751, -0.32577072, -0.70558035,  0.42316967, -1.29262094, -0.59212844, -2.61416146, -0.48140721,  0.9313421 , -1.83331751,  1.66674302,  0.59510136, -1.82824008, -0.9645186 ,  0.28207275,  0.94735127, -1.96897133, 0.82496388, -0.25944291,  1.20418117, -2.14883667,  1.90020092, 0.41359086,  0.39248284,  1.43947925,  0.22795424,  0.45977897, 0.3564375 ,  0.11501673,  0.32952243, -0.95133624, -0.04622483, -0.06278706, -2.69543526, -1.15465709, -0.75434949,  1.89531099, -1.07646279, -0.63602401, -0.70741547,  1.43561289,  2.06615224, -0.83869739, -1.63188821,  0.37914104, -2.18231612, -0.44807457, 1.24033377,  0.84607874, -1.25293887, -0.09902826,  1.46587415, -1.72202212, -0.05032691,  0.5991423 ,  0.5484346 , -1.384156  , 0.69761149,  0.20499454, -1.02961378,  0.80259413,  2.12748896, 1.04929356,  0.13554954, -2.59635771,  0.24255634,  0.83374358, 0.87762272,  2.36769587, -1.08442317, -0.31325899,  1.17499181, -1.24832511,  1.08337927,  0.72333116, -0.1014137 ,  1.75814114, -0.25646647, -0.16479253,  3.07378125, -0.44185785,  1.14518142, -1.74297905,  1.02679082,  1.32323188, -1.17587937,  0.13530816, 1.04983774, -1.49894245, -2.59410917,  0.76929462, -0.31554003, 0.48873112, -0.37909797,  1.82301336, -0.14406389,  0.08400135, 1.60440236, -0.33960766, -0.04890013, -0.25086635, -0.27969475, 2.0378652 ,  0.25586582, -0.17835031, -0.43864308, -0.13212165, 1.41631503,  0.194835  ,  0.72188147, -0.08214093, -0.84646846, -0.92841091, -0.87660617,  0.51390159,  0.49539463, -0.03366364};
        double[][] output_250 = {{ 0.655701755738156 ,  -0.1837394320954678 },  { 0.1407263087066068 ,  0.001207295879185267 },  { 0.1025002551397098 ,  0.48412225405781567 },  { -1.5379442663033114 ,  -0.7777259359978095 },  { 1.323252806705667 ,  -2.042630978609898 },  { 0.7263591465354037 ,  0.6224209899183163 },  { 0.25936967706710956 ,  -1.333799709918319 },  { 1.9458380996719884 ,  -0.017086861170416797 },  { 1.0018159918958303 ,  1.0764859598417897 },  { -0.61522367874137 ,  1.388054617967792 },  { -1.0696524823169795 ,  -0.9699774336785658 },  { 0.5357017922425426 ,  -0.9261812733589693 },  { 1.192519744048099 ,  -1.0248052948613016 },  { 1.7367406605150848 ,  1.2754592202772579 },  { -0.8160157316906279 ,  0.6090439858442415 },  { 0.5263812864307192 ,  -0.016060653044767493 },  { -0.7184320957604102 ,  -0.05470700468228324 },  { 1.3168152117263388 ,  -0.852707647325182 },  { 0.0793820152426124 ,  1.4248313613086352 },  { -0.6127575634553244 ,  -0.86742418508537 },  { 0.6872514465545713 ,  -0.3057951724637425 },  { 0.6862310212853276 ,  -0.5304967452258281 },  { 0.9727679211244931 ,  0.8274065663176408 },  { -0.34033366391369674 ,  -0.3345002715327698 },  { 1.8578500986131203 ,  0.4546029953277992 },  { -1.202301939282593 ,  1.7561684836269875 },  { -0.643256463116931 ,  -1.4016458523805686 },  { 0.5686035113167068 ,  -0.49025016936168425 },  { 1.5181189533418356 ,  -0.7463850885620351 },  { 1.2573907140355478 ,  2.0374684436268287 },  { -1.15249820844051 ,  0.8430747264525326 },  { -0.6753612221373446 ,  0.10353305861116166 },  { -0.5179158019471022 ,  -0.9275892417812673 },  { 0.3373646408864792 ,  -0.19936746807939915 },  { -0.05476090220604859 ,  -1.1109483580571606 },  { 1.4148017415476488 ,  0.10778545754579279 },  { -0.5078694684910775 ,  -0.16747765202280243 },  { 1.464661132574091 ,  -0.8442420978843455 },  { 0.8847708883569935 ,  0.8388588628102999 },  { 0.11163781133445844 ,  0.5890503436794304 },  { -0.12063323026924673 ,  -0.4032473211998345 },  { 0.9756998015476117 ,  0.4044257276325157 },  { -0.9370523124120025 ,  -0.3528820601831346 },  { 2.0238491160178014 ,  -1.1311910049804201 },  { 0.5060504618952668 ,  1.17282272817324 },  { 1.2915508615997051 ,  -0.70606295793103 },  { 1.4987394001085623 ,  1.739442926512093 },  { 0.38710977928886703 ,  1.3303030212722466 },  { -0.8118584879394188 ,  1.7186349228739686 },  { -0.3847237346400057 ,  -0.6959521873222839 },  { 0.8642890774866524 ,  1.3125526883553125 },  { -0.926254142516733 ,  0.8580000318847263 },  { -0.6949695404411592 ,  0.46022196577211244 },  { -0.4681119409260662 ,  -0.5454854296752746 },  { 0.2969172908165417 ,  0.8120009711629 },  { -1.3946666108672958 ,  0.05852019573441444 },  { -0.3453969560963345 ,  -0.5765414501883531 },  { -0.3138179052436824 ,  -1.0910087247243443 },  { 1.2781129846919517 ,  0.008535903508721958 },  { -1.1946720764258785 ,  0.33233331761175455 },  { 0.861846555575004 ,  -1.8333110963721806 },  { 1.1222134757258573 ,  1.133256084391845 },  { -0.5042279194744028 ,  -0.16197123008828473 },  { 0.5256936667542557 ,  0.24391741181331897 },  { -0.6934925636408261 ,  -0.31168577072284126 },  { 0.9808865800966169 ,  -0.682814440096002 },  { -0.07227568941296653 ,  0.438166935227955 },  { 0.520221338672912 ,  -1.3167698525833516 },  { 1.9640008917418317 ,  0.6591709720640916 },  { -0.27061041307318257 ,  1.37847721066559 },  { -0.279663400734368 ,  -0.3590851391994672 },  { 0.667259719848766 ,  0.3741787462148029 },  { -0.5608174543341118 ,  0.22903936398401264 },  { 0.6196870693631227 ,  -0.5493642522816904 },  { 0.17047405956175862 ,  0.6302822224726883 },  { 0.19034674507911703 ,  -0.4172370447830317 },  { 0.44272960755361773 ,  0.5973794856870802 },  { -0.18190086054286053 ,  -0.03948901292395288 },  { -0.1805093972671164 ,  0.32572057759103706 },  { -0.7083121791248731 ,  -1.2476387769517396 },  { 1.3694934708633897 ,  -1.364664365669165 },  { 1.8184168126132603 ,  -0.30649515328260746 },  { 1.7429210875465593 ,  1.1206689094634876 },  { 0.15609589151427386 ,  0.9940695163870539 },  { 0.576201818034806 ,  0.386919776023867 },  { 0.43127322091422504 ,  0.6044769066292149 },  { 0.28955072933011605 ,  0.6455291381077789 },  { 0.08033154081320043 ,  -0.06369856885492306 },  { 1.1360120616377871 ,  0.1656377813718957 },  { 0.8317402778605175 ,  0.5385208072033182 },  { 1.3815754098475925 ,  1.087354592805818 },  { 0.37214720941436746 ,  1.7012400657643696 },  { 0.05648272142699608 ,  1.7816521565469132 },  { -1.4278028255007285 ,  0.9876397696719085 },  { 0.17966294227839058 ,  -0.22465516051599219 },  { -0.2834211650654752 ,  0.9967572203931434 },  { 0.16444714769345625 ,  -0.545636013845899 },  { 1.4961156413942986 ,  1.1331519551212996 },  { 0.148209128028825 ,  2.0652890208509445 },  { -0.722189933498044 ,  1.889421369873228 },  { -1.51734122729781 ,  1.5073590091813667 },  { -2.117529331857935 ,  0.044696892804950435 },  { -0.3185238435554184 ,  -0.8078671592399705 },  { -0.21457681843937998 ,  0.4790144072562099 },  { -0.47504838982337017 ,  0.40104246854745806 },  { -1.5016179041729116 ,  0.043991630933891426 },  { 0.585554831547189 ,  -1.4368675409969272 },  { 0.10944521697674099 ,  1.6935857252456168 },  { -1.0456830931734775 ,  -1.3805003296483733 },  { 1.977149840219587 ,  0.8719631165358843 },  { -1.0057945743010985 ,  1.3194771352148715 },  { -0.07061853421402708 ,  1.3041970483293481 },  { -2.951325264596274 ,  0.41454931838019976 },  { 0.3802771170094011 ,  -1.8095024800493624 },  { -0.2082576859859945 ,  1.1964692182931618 },  { -0.6196929375479904 ,  -0.53238978586758 },  { -0.22213952475186124 ,  0.7459275105541633 },  { -1.0553604004709671 ,  0.03435427063343457 },  { -1.2737954468922321 ,  0.039279679759215695 },  { -0.9578359715822126 ,  -1.892070806491675 },  { 1.5892314701293886 ,  -0.6245799781023784 },  { -0.1709147741877393 ,  1.301508751591529 },  { -0.9422296491375394 ,  -0.3072862998690299 },  { -0.05327611026549107 ,  0.47054056756601004 },  { -2.5583263990630534 ,  -0.07959496475383492 },  { -0.38297139353352294 ,  -3.5050117456479506 },  { 2.5530244607153465 ,  -0.758114947824874 },  { 0.5357427237794862 ,  0.9943048871794828 },  { -0.25199318095028717 ,  -0.2521427630620372 },  { 1.0138226541885362 ,  -0.2679447200991979 },  { 0.268525740712452 ,  1.0623780473195894 },  { -0.5287865452408869 ,  0.031183958038338375 },  { 0.20275856503851766 ,  -0.4724910260962224 },  { 1.3442175146148936 ,  0.3158980965083091 },  { -0.3257707158448252 ,  1.8690023694236324 },  { -0.7055803457281087 ,  -0.2976566034618759 },  { 0.423169670420842 ,  1.1517926314745626 },  { -1.292620937408519 ,  0.6909752809942882 },  { -0.5921284392150398 ,  0.7192463032144998 },  { -2.614161455509914 ,  0.0999023898324548 },  { -0.4814072104892431 ,  -2.4921465541925416 },  { 0.9313421008711159 ,  0.4226529313248378 },  { -1.8333175060553317 ,  -0.5997104121659277 },  { 1.6667430171149815 ,  -1.9195185302946873 },  { 0.5951013627287135 ,  2.2351599410773533 },  { -1.8282400761078588 ,  -0.07445128703450678 },  { -0.9645186049413695 ,  -0.680274747074376 },  { 0.2820727454976691 ,  -1.9262759442369375 },  { 0.9473512673079653 ,  1.2531941407795486 },  { -1.9689713257940908 ,  -0.8018936495444202 },  { 0.8249638847995142 ,  -1.009424659544541 },  { -0.25944291411099585 ,  -0.726135441277959 },  { 1.2041811665452438 ,  0.3424107116359821 },  { -2.1488366698756156 ,  -0.4046153353363327 },  { 1.9002009157813764 ,  -2.4046030929563513 },  { 0.4135908616566065 ,  1.260571099297898 },  { 0.3924828377016958 ,  -1.4962273016768965 },  { 1.4394792540145145 ,  0.7345481690739225 },  { 0.2279542399419314 ,  0.23062045037401674 },  { 0.4597789736066781 ,  0.5363344675598238 },  { 0.35643749578909434 ,  0.31873885641793925 },  { 0.11501673366458778 ,  0.7512685835774788 },  { 0.32952242945811827 ,  0.6154082347362955 },  { -0.9513362425199571 ,  1.2268970126730787 },  { -0.04622483209887571 ,  -0.6407895146197654 },  { -0.06278705947917211 ,  2.194564808686224 },  { -2.6954352604869816 ,  -0.011061354373855636 },  { -1.1546570904542584 ,  -0.8748466687794033 },  { -0.7543494921344273 ,  -2.1713201680211416 },  { 1.8953109886746935 ,  -0.24973405083905584 },  { -1.0764627908825142 ,  0.9435616022298879 },  { -0.6360240128412727 ,  -0.8980843728278556 },  { -0.7074154671338784 ,  -1.0970504957065492 },  { 1.4356128876756227 ,  -1.8963038469359068 },  { 2.06615224476651 ,  1.2314418242280367 },  { -0.8386973941756595 ,  2.0136824663302892 },  { -1.6318882087618631 ,  -0.5611058966929441 },  { 0.37914104181628144 ,  0.011130214934974675 },  { -2.182316119792252 ,  0.3148388983765616 },  { -0.4480745719642639 ,  -2.679309955127911 },  { 1.2403337744491671 ,  -0.6870929600484927 },  { 0.8460787387638821 ,  0.3058480553727935 },  { -1.252938870839338 ,  0.7322733549152818 },  { -0.09902826220462316 ,  -2.2546917537859024 },  { 1.4658741518601683 ,  0.981936875940624 },  { -1.72202212248545 ,  0.07185232231765584 },  { -0.050326910663548406 ,  -1.4001667149546713 },  { 0.5991422991116294 ,  -0.8079946085285392 },  { 0.5484346041865175 ,  0.6050964454379715 },  { -1.3841560039526386 ,  -0.46241898444061874 },  { 0.6976114891581671 ,  -1.4492372577274968 },  { 0.2049945395446325 ,  0.40454384661632864 },  { -1.0296137776559295 ,  -0.9782833937519663 },  { 0.8025941274860241 ,  -2.206240209502616 },  { 2.1274889574122446 ,  -0.21908530196849849 },  { 1.0492935618153174 ,  0.7354357220012232 },  { 0.13554953947031675 ,  1.7659026675466805 },  { -2.5963577099636947 ,  -0.13417653347463876 },  { 0.24255634482845778 ,  -2.569498287463645 },  { 0.8337435787499814 ,  -0.411435954053912 },  { 0.8776227219867592 ,  -1.4739308662510862 },  { 2.36769587454966 ,  0.8156313680356345 },  { -1.0844231740973973 ,  1.5480705843342777 },  { -0.3132589856261718 ,  -1.63137790278495 },  { 1.1749918146649931 ,  0.5605200741902081 },  { -1.2483251054899842 ,  -0.30289711394905305 },  { 1.0833792675790017 ,  -1.525085284271255 },  { 0.7233311619223166 ,  0.5450487911469966 },  { -0.10141370092677368 ,  -0.8308880284295747 },  { 1.758141144228886 ,  -0.3333272403972327 },  { -0.2564664689749066 ,  1.313114031774952 },  { -0.16479253149677026 ,  -2.162450319787815 },  { 3.0737812475021715 ,  0.6018444450116723 },  { -0.4418578494868209 ,  1.28018654304192 },  { 1.1451814170507648 ,  0.5669456988219967 },  { -1.7429790512106489 ,  1.0933136936240302 },  { 1.0267908150468144 ,  -2.0856431044872954 },  { 1.3232318785028108 ,  2.1392484183148426 },  { -1.1758793691017457 ,  0.34273369884463334 },  { 0.13530816330186582 ,  -0.24032351131856228 },  { 1.0498377405918284 ,  0.6019062455364498 },  { -1.498942454637482 ,  2.511199274712275 },  { -2.5941091731135275 ,  -1.8652650376215112 },  { 0.7692946151122214 ,  -1.1143851126399469 },  { -0.31554003208185166 ,  -0.6559131842644221 },  { 0.4887311209320909 ,  -0.4243774666477784 },  { -0.37909797375517007 ,  -1.0391500014520272 },  { 1.8230133565517077 ,  -0.699432990179515 },  { -0.1440638911086651 ,  1.014818021168387 },  { 0.08400134713971 ,  -1.3298313600787723 },  { 1.6044023624726511 ,  0.3943436489697862 },  { -0.339607659834978 ,  0.8559256630421166 },  { -0.04890013216380521 ,  -0.3098280495394423 },  { -0.2508663528775031 ,  0.22823293276842987 },  { -0.27969474545470063 ,  -1.419435415128387 },  { 2.0378651966838093 ,  -0.35852823590645494 },  { 0.2558658198233852 ,  1.3443551959500881 },  { -0.1783503122881428 ,  0.09045310654164411 },  { -0.4386430776697295 ,  0.30130268890791334 },  { -0.1321216462675583 ,  -1.2172628596005721 },  { 1.4163150310164059 ,  -0.032132175175761064 },  { 0.19483499779537955 ,  0.5063822868179239 },  { 0.7218814731185881 ,  0.2900831516027945 },  { -0.08214093073335892 ,  1.2266793586764517 },  { -0.8464684564896456 ,  0.41138011774005223 },  { -0.9284109132381022 ,  0.0038802878991825765 },  { -0.8766061744304492 ,  -1.0049244671796278 },  { 0.5139015915015988 ,  -1.175186267636912 },  { 0.495394628307098 ,  0.027924515003479655 },  { -0.03366363769531034 ,  -0.5101313542116225 } };
        Hilbert h = new Hilbert(signal_250);
        h.transform();
        double[][] output = h.getOutput();
        Assertions.assertEquals(256, output.length);
        h.transform(true);
        output = h.getOutput();
        Assertions.assertEquals(250, output.length);
        for (int i=0; i<output.length; i++) {
            Assertions.assertArrayEquals(output_250[i], output[i], 0.001);
        }
    }
}
