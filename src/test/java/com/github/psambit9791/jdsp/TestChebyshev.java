/*
 * Copyright (c) 2019 - 2023  Sambit Paul
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.github.psambit9791.jdsp;

import com.github.psambit9791.jdsp.filter.Chebyshev;
import com.github.psambit9791.jdsp.filter._IIRFilter;
import com.github.psambit9791.jdsp.signal.Convolution;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class TestChebyshev {

    private double ripple_factor = 1;

    // 5Hz Sine + 15Hz Sine + 30Hz Sine sampled @ 100Hz with Nyquist of 50Hz
    private double[] signal1 = {0.0, 2.069, 0.951, 0.53, 1.314, 0.0, -0.588, 1.706, 2.127, 0.167, -0.0, -0.167, -2.127,
            -1.706, 0.588, 0.0, -1.314, -0.53, -0.951, -2.069, -0.0, 2.069, 0.951, 0.53, 1.314, 0.0, -0.588, 1.706,
            2.127, 0.167, -0.0,-0.167, -2.127, -1.706, 0.588, -0.0, -1.314, -0.53, -0.951, -2.069, -0.0, 2.069, 0.951,
            0.53, 1.314, 0.0,-0.588, 1.706, 2.127, 0.167, -0.0, -0.167, -2.127, -1.706, 0.588, 0.0, -1.314, -0.53,
            -0.951, -2.069, -0.0, 2.069, 0.951, 0.53, 1.314, 0.0, -0.588, 1.706, 2.127, 0.167, -0.0, -0.167, -2.127,
            -1.706, 0.588, 0.0, -1.314, -0.53, -0.951, -2.069, -0.0, 2.069, 0.951, 0.53, 1.314, 0.0, -0.588, 1.706,
            2.127, 0.167, -0.0, -0.167, -2.127, -1.706, 0.588, 0.0, -1.314, -0.53, -0.951, -2.069};

    // 2Hz Sine + 20Hz Sine + 45Hz Sine sampled @ 100Hz with Nyquist of 50Hz
    private double[] signal2 = {0.0, 1.385, 0.249, 0.589, -1.42, 1.588, 0.685, 2.167, -0.331, 0.263, 0.951, 1.624, 2.174,
            -0.399, 0.982, -0.049, 2.807, 0.623, 0.771, -0.576, 0.588, 1.742, 0.368, 0.47, -1.777, 1.0, -0.125, 1.148,
            -1.544, -1.124, -0.588, -0.043, 0.405, -2.241, -0.905, -1.951, 0.92, -1.219, -0.998, -2.242, -0.951, 0.355,
            -0.844, -0.549, -2.587, 0.412, -0.482, 1.029, -1.424, -0.767, -0.0, 0.767, 1.424, -1.029, 0.482, -0.412,
            2.587, 0.549, 0.844, -0.355, 0.951, 2.242, 0.998, 1.219, -0.92, 1.951, 0.905, 2.241, -0.405, 0.043, 0.588,
            1.124, 1.544, -1.148, 0.125, -1.0, 1.777, -0.47, -0.368, -1.742, -0.588, 0.576, -0.771, -0.623, -2.807,
            0.049, -0.982, 0.399, -2.174, -1.624, -0.951, -0.263, 0.331, -2.167, -0.685, -1.588, 1.42, -0.589, -0.249,
            -1.385};

    private Chebyshev t1_1 = new Chebyshev(100, this.ripple_factor, 1);
    private Chebyshev t1_2 = new Chebyshev(100, this.ripple_factor);

    @Test
    public void Type1LowPassTest1() {
        final double[] out = {0.0, 0.003, 0.019, 0.072, 0.178, 0.335, 0.521, 0.693, 0.808, 0.854, 0.846, 0.803, 0.734,
                0.629, 0.461, 0.218, -0.078, -0.379, -0.636, -0.815, -0.911, -0.935, -0.894, -0.777, -0.571, -0.283,
                0.055, 0.386, 0.652, 0.825, 0.906, 0.914, 0.86, 0.741, 0.544, 0.27, -0.051, -0.366, -0.624, -0.797,
                -0.884, -0.902, -0.861, -0.751, -0.558, -0.284, 0.041, 0.364, 0.628, 0.804, 0.894, 0.911, 0.865, 0.751,
                0.555, 0.278, -0.048, -0.368,-0.63, -0.804, -0.89, -0.906, -0.862, -0.748, -0.553, -0.279, 0.045, 0.366,
                0.628, 0.802, 0.891, 0.908, 0.863, 0.75, 0.555, 0.279, -0.046, -0.366, -0.629, -0.804, -0.891, -0.907,
                -0.863, -0.749, -0.554, -0.279, 0.046, 0.367, 0.629, 0.803, 0.891, 0.908, 0.862, 0.749, 0.555, 0.279,
                -0.046, -0.366, -0.628, -0.804};

        double[] result = t1_1.lowPassFilter(this.signal1, 4, 9);
        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void Type1LowPassTest2() {
        final double[] out = {0.0, 0.0, 0.001, 0.005, 0.014, 0.029, 0.049, 0.075, 0.107, 0.147, 0.196, 0.251, 0.313,
                0.38, 0.452, 0.527, 0.602, 0.675, 0.743, 0.805, 0.858, 0.898, 0.925, 0.936, 0.931, 0.911, 0.873, 0.819,
                0.749, 0.666, 0.572, 0.468, 0.356, 0.237, 0.115, -0.007, -0.128, -0.248, -0.364, -0.473, -0.574, -0.667,
                -0.75, -0.822, -0.882, -0.928, -0.961, -0.98, -0.985, -0.974, -0.948, -0.907, -0.852, -0.783, -0.701,
                -0.607, -0.503, -0.391, -0.273, -0.149, -0.022, 0.105, 0.23, 0.35, 0.466, 0.574, 0.673, 0.761, 0.835,
                0.897, 0.946, 0.979, 0.996, 0.997, 0.983, 0.954, 0.911, 0.852, 0.78, 0.696, 0.603, 0.499, 0.387, 0.269,
                0.146, 0.022, -0.102, -0.227, -0.347, -0.462, -0.57, -0.668, -0.757, -0.833, -0.897, -0.945, -0.978,
                -0.997, -1.0, -0.987};

        double[] result = t1_2.lowPassFilter(this.signal2,4, 5);
        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void Type1HighPassTest1() {
        final double[] out = {0.0, 0.06, -0.299, 0.599, -0.538, -0.031, 0.611, -0.524, -0.232, 0.734, -0.243, -0.622,
                0.669, 0.211, -0.856, 0.333, 0.69, -0.772, -0.223, 0.922, -0.36, -0.721, 0.82, 0.236, -0.968, 0.357,
                0.745, -0.83, -0.238, 0.991, -0.36, -0.768, 0.828, 0.247, -0.991, 0.366, 0.778, -0.836, -0.262, 0.989,
                -0.36, -0.772, 0.843, 0.264, -0.998, 0.349, 0.771, -0.836, -0.255, 1.004, -0.352, -0.781, 0.828, 0.257,
                -0.995, 0.361, 0.784, -0.835, -0.267, 0.99, -0.357, -0.774, 0.842, 0.266, -0.998, 0.348, 0.772, -0.835,
                -0.257, 1.003, -0.351, -0.781, 0.828, 0.257, -0.995, 0.36, 0.784, -0.834, -0.267, 0.989, -0.357, -0.774,
                0.842, 0.266, -0.998, 0.347, 0.772, -0.835, -0.257, 1.003, -0.351, -0.781, 0.828, 0.257, -0.995, 0.36,
                0.784, -0.834, -0.267, 0.989};

        double[] result = t1_1.highPassFilter(this.signal1, 4, 29);
        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void Type1HighPassTest2() {
        final double[] out = {0.0, 0.003, -0.017, 0.058, -0.131, 0.236, -0.374, 0.534, -0.691, 0.819, -0.891, 0.881,
                -0.778, 0.586, -0.324, 0.018, 0.293, -0.573, 0.794, -0.934, 0.979, -0.931, 0.798, -0.591, 0.33, -0.042,
                -0.252, 0.524, -0.748, 0.901, -0.97, 0.945, -0.823, 0.621, -0.357, 0.054, 0.254, -0.534, 0.762, -0.915,
                0.975, -0.941, 0.816, -0.611, 0.346, -0.05, -0.251, 0.529, -0.755, 0.907, -0.973, 0.943, -0.819, 0.615,
                -0.352, 0.052, 0.252, -0.53, 0.758, -0.912, 0.974, -0.941, 0.818, -0.614, 0.349, -0.052, -0.251, 0.531,
                -0.757, 0.909, -0.973, 0.942, -0.817, 0.614, -0.351, 0.052, 0.252, -0.53, 0.757, -0.911, 0.973, -0.941,
                0.819, -0.614, 0.349, -0.052, -0.251, 0.531, -0.758, 0.909, -0.974, 0.943, -0.817, 0.614, -0.351, 0.052,
                0.252, -0.53, 0.757, -0.91};

        double[] result = t1_2.highPassFilter(this.signal2,4, 40);
        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void Type1BandPassTest1() {
        final double[] out = {0.0, 0.001, 0.003, 0.004, -0.003, -0.018, -0.023, 0.002, 0.051, 0.076, 0.025, -0.092,
                -0.175, -0.107, 0.11, 0.306, 0.264, -0.058, -0.426, -0.486, -0.099, 0.466, 0.713, 0.356, -0.374,
                -0.869, -0.659, 0.143, 0.884, 0.919, 0.182, -0.733, -1.062, -0.518, 0.452, 1.046, 0.782, -0.109, -0.889,
                -0.93, -0.222, 0.639, 0.954, 0.491, -0.352, -0.884, -0.684, 0.069, 0.752, 0.808, 0.198, -0.575, -0.873,
                -0.444, 0.361, 0.874, 0.663, -0.107, -0.801, -0.837, -0.173, 0.644, 0.933, 0.451, -0.407, -0.931,
                -0.686, 0.122, 0.824, 0.844, 0.173, -0.63, -0.907, -0.439, 0.38, 0.875, 0.647, -0.107, -0.764, -0.788,
                -0.163, 0.592, 0.856, 0.413, -0.371, -0.852, -0.629, 0.118, 0.774, 0.794, 0.155, -0.62, -0.89, -0.424,
                0.397, 0.896, 0.658, -0.124, -0.808, -0.829};

        double[] result = t1_1.bandPassFilter(this.signal1, 4, 12, 18);
        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void Type1BandPassTest2() {
        final double[] out = {0.0, 0.023, 0.044, -0.076, -0.233, 0.016, 0.529, 0.349, -0.599, -0.87, 0.17, 1.058, 0.504,
                -0.674, -0.904, 0.02, 0.857, 0.516, -0.537, -0.824, 0.079, 0.881, 0.447, -0.601, -0.834, 0.048, 0.861,
                0.509, -0.539, -0.83, 0.047, 0.852, 0.452, -0.583, -0.815, 0.074, 0.875, 0.487, -0.571, -0.846, 0.045,
                0.862, 0.476, -0.563, -0.815, 0.064, 0.861, 0.472, -0.576, -0.837, 0.057, 0.871, 0.483, -0.566, -0.826,
                0.054, 0.857, 0.472, -0.57, -0.827, 0.062, 0.87, 0.477, -0.572, -0.831, 0.055, 0.862, 0.478, -0.567,
                -0.827, 0.059, 0.865, 0.475, -0.573, -0.83, 0.058, 0.866, 0.478, -0.568, -0.829, 0.056, 0.864, 0.476,
                -0.57, -0.828, 0.059, 0.865, 0.477, -0.57, -0.83, 0.057, 0.864, 0.477, -0.57, -0.828, 0.058, 0.864,
                0.476, -0.57, -0.829};

        double[] result = t1_2.bandPassFilter(this.signal2,4, 12, 30);
        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void Type1BandStopTest1() {
        final double[] out = {0.0, 0.201, -0.373, 0.732, -0.132, -0.042, 1.057, 0.239, 0.069, 1.347, 0.861, 0.011,
                1.165, 1.267, -0.216, 0.275, 1.055, -0.508, -0.982, 0.283, -0.583, -1.821, -0.504, -0.159, -1.594,
                -0.755, 0.685, -0.377, -0.447, 1.391, 1.01, -0.064, 1.302, 1.642, -0.062, 0.279, 1.212, -0.384, -1.078,
                0.206, -0.538, -1.849, -0.589, -0.123, -1.499, -0.732, 0.719, -0.275, -0.391, 1.372, 1.005, -0.066,
                1.238, 1.561, -0.102, 0.243, 1.166,-0.394, -1.048, 0.233, -0.51, -1.8, -0.546, -0.108, -1.494, -0.731,
                0.7, -0.31, -0.418, 1.351, 0.984, -0.076, 1.246, 1.576, -0.086, 0.266, 1.189, -0.381, -1.043, 0.233,
                -0.518, -1.817, -0.563, -0.122, -1.506, -0.738, 0.7, -0.303, -0.409, 1.363, 0.996, -0.067, 1.251, 1.577,
                -0.089, 0.259, 1.18, -0.389, -1.05, 0.228};

        double[] result = t1_1.bandStopFilter(this.signal1, 4, 7, 28);
        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void Type1BandStopTest2() {
        final double[] out = {0.0, 0.196, -0.165, 0.726, -0.33, 1.152, -0.393, 1.396, -0.349, 1.242, 0.267, 0.817,
                1.027, 0.508, 1.613, 0.105, 1.858, -0.056, 1.596, 0.145, 1.129, 0.544, 0.441, 0.975, -0.288, 1.1, -0.76,
                0.938, -0.89, 0.476, -0.653, -0.26, -0.302, -1.021, -0.009, -1.593, 0.115, -1.756, -0.065, -1.519,
                -0.503, -1.021, -1.06, -0.408, -1.482, 0.097, -1.573, 0.338, -1.293, 0.252, -0.677, -0.062, 0.11,
                -0.389, 0.845, -0.551, 1.313, -0.418, 1.39, 0.027, 1.127, 0.677, 0.673, 1.33, 0.232, 1.749, -0.014,
                1.788, 0.031, 1.428, 0.341, 0.78, 0.754, 0.044, 1.062, -0.557, 1.086, -0.854, 0.752, -0.805, 0.114,
                -0.503, -0.66, -0.135, -1.339, 0.099, -1.716, 0.063, -1.692, -0.268, -1.303, -0.786, -0.709, -1.291,
                -0.124, -1.573, 0.255, -1.487, 0.324, -1.02};

        double[] result = t1_2.bandStopFilter(this.signal2,4, 12, 30);
        Assertions.assertArrayEquals(result, out, 0.001);
    }

    private Chebyshev t2_1 = new Chebyshev(100, this.ripple_factor, 2);

    @Test
    public void Type2LowPassTest1() {
        final double[] out = {0.0, 1.466, 0.552, 0.898, 1.505, 0.098, -0.207, 1.409, 1.35, 0.454, 0.937, 0.172, -1.913,
                -1.497, -0.02, -0.56, -0.772, 0.004, -1.098, -2.129, -0.357, 0.983, 0.519, 1.147, 1.625, -0.01, -0.345,
                1.4, 1.435, 0.519, 0.941, 0.151, -1.92, -1.495, -0.029, -0.583, -0.792, 0.001, -1.084, -2.109, -0.34,
                0.993, 0.521, 1.141, 1.612, -0.025, -0.357, 1.396, 1.44, 0.531, 0.954, 0.162, -1.915, -1.498, -0.037,
                -0.595, -0.803, -0.005, -1.083, -2.103, -0.33, 1.002, 0.527, 1.141, 1.608, -0.033, -0.365, 1.39, 1.438,
                0.534, 0.961, 0.169, -1.91,-1.496, -0.039, -0.6, -0.809, -0.01, -1.085, -2.102, -0.326, 1.007, 0.532,
                1.144, 1.607, -0.036, -0.37, 1.386, 1.435, 0.534, 0.963, 0.173, -1.906, -1.493, -0.039, -0.601, -0.812,
                -0.014, -1.088, -2.103};

        double[] result = t2_1.lowPassFilter(this.signal1, 4, 9);
        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void Type2LowPassTest2() {
        final double[] out = {0.0, 1.033, -0.039, 0.477, -0.903, 1.723, 0.44, 1.471, -0.55, 0.535, 1.199, 1.506, 1.651,
                -0.377, 1.254, 0.407, 2.573, 0.317, 0.726, -0.087, 1.073, 1.631, 0.156, 0.398, -1.152, 1.349, -0.077,
                0.767, -1.481, -0.634, -0.187, -0.055, -0.037, -2.15, -0.577, -1.459, 0.691, -1.561, -1.121, -1.87,
                -0.614, 0.07, -1.25, -0.832, -2.188, 0.522, -0.682, 0.394, -1.617, -0.53, 0.155, 0.52, 0.761, -1.142,
                0.625, -0.083, 2.219, 0.095, 0.638, -0.036, 1.267, 1.968, 0.636, 1.012, -0.414, 2.197, 0.868, 1.794,
                -0.388, 0.508, 0.984, 1.129, 1.138, -1.003, 0.524, -0.422, 1.647, -0.7, -0.368, -1.237, -0.11, 0.439,
                -1.024, -0.75, -2.252, 0.314, -1.032, -0.093, -2.233, -1.265, -0.689, -0.419, -0.26, -2.229, -0.511,
                -1.249, 1.04, -1.076, -0.508, -1.138};

        double[] result = t2_1.lowPassFilter(this.signal2,4, 5);
        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void Type2HighPassTest1() {
        final double[] out = {0.0, 1.555, 0.281, 0.52, 1.368, 0.18, 0.11, 1.625, 0.939, -0.295, 0.514, 0.296, -1.164,
                -0.516, 0.139, -1.341, -1.401, -0.035, -0.742, -1.225, 0.528, 0.665, -0.598, 0.547, 1.582, 0.222, 0.392,
                1.86, 0.644, -0.6,0.679, 0.442, -1.303, -0.497, 0.317, -1.429, -1.577, 0.069, -0.625, -1.343, 0.482,
                0.795, -0.607, 0.423, 1.627, 0.32, 0.321, 1.8, 0.729, -0.576, 0.591, 0.45, -1.226, -0.53, 0.259, -1.38,
                -1.542, 0.012, -0.637, -1.286, 0.473, 0.748, -0.582, 0.457, 1.593, 0.3, 0.359, 1.805, 0.694, -0.568,
                0.621, 0.432, -1.246, -0.507,0.27, -1.404, -1.543, 0.034, -0.643, -1.305, 0.486, 0.76, -0.598, 0.452,
                1.609, 0.3, 0.344, 1.81, 0.705, -0.577, 0.614, 0.443, -1.243, -0.518, 0.271, -1.395, -1.547, 0.028,
                -0.637, -1.301};

        double[] result = t2_1.highPassFilter(this.signal1, 4, 29);
        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void Type2HighPassTest2() {
        final double[] out = {0.0, 0.978, 0.212, 0.845, -1.067, 1.09, 0.068, 2.267, -0.057, 0.512, 0.281, 1.279, 2.001,
                0.074, 1.046, -0.5, 2.331, 0.546, 1.313, -0.561, 0.345, 1.119, 0.594, 0.833, -1.471, 0.646, -0.553,
                1.386, -1.13, -0.665, -1.036, -0.214, 0.457, -1.543, -0.64, -2.184, 0.637, -1.1, -0.281, -2.079, -1.043,
                -0.161, -0.523, -0.114, -2.248, 0.082, -0.929, 1.228, -1.071, -0.407, -0.555, 0.456, 1.318, -0.499,
                0.552, -0.839, 2.093, 0.453, 1.351, -0.412, 0.654, 1.525, 1.127, 1.485, -0.744, 1.486, 0.342, 2.344,
                -0.114, 0.357, 0.02, 0.827, 1.474, -0.548, 0.283, -1.312, 1.421, -0.414, 0.316, -1.613, -0.685, 0.069,
                -0.431, -0.139, -2.419, -0.208, -1.342, 0.689, -1.707, -1.153, -1.382, -0.442, 0.351, -1.498, -0.486,
                -1.887, 1.054, -0.574, 0.371, -1.346};

        double[] result = t2_1.highPassFilter(this.signal2,4, 40);
        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void Type2BandPassTest1() {
        final double[] out = {0.0, 1.513, 0.515, 0.591, 1.058, -0.246, -0.256, 1.697, 1.674, 0.407, 0.526, -0.215,
                -1.92, -1.013, 0.719, -0.074, -0.827, -0.375, -1.414, -2.137, 0.003, 1.442, 0.587, 0.645, 0.877, -0.556,
                -0.404, 1.803, 1.871,0.529, 0.561, -0.208, -1.924, -1.044, 0.661, -0.139, -0.871, -0.372, -1.353,
                -2.055, 0.033, 1.386, 0.5, 0.62, 0.939, -0.474, -0.379, 1.763, 1.821, 0.512, 0.563, -0.221, -1.951,
                -1.044, 0.717, -0.054, -0.829, -0.417, -1.454, -2.132, 0.035, 1.448, 0.561, 0.64, 0.93, -0.48, -0.378,
                1.746, 1.774, 0.468, 0.57, -0.155, -1.876, -1.026, 0.666, -0.128, -0.865, -0.396, -1.41, -2.106, 0.037,
                1.449, 0.571, 0.64, 0.898, -0.531, -0.404, 1.778, 1.845, 0.52, 0.562, -0.21, -1.928, -1.039, 0.685,
                -0.106, -0.854, -0.387, -1.391, -2.089};

        double[] result = t2_1.bandPassFilter(this.signal1, 4, 12, 18);
        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void Type2BandPassTest2() {
        final double[] out = {0.0, 1.014, 0.252, 0.254, -1.281, 1.214, 0.693, 1.924, -0.645, 0.204, 0.511, 1.724, 1.692,
                -0.237, 0.631, 0.01, 2.637, 0.58, 0.798, -0.698, 0.902, 1.565, 0.777, 0.325, -1.396, 0.949, 0.147, 1.301,
                -1.442, -0.734, -0.57, 0.449, 0.323, -1.755, -0.974, -1.589, 0.995, -1.048, -0.786, -2.261, -0.615,
                0.134, -0.529, -0.84, -2.375, 0.187, -0.428, 0.921, -1.616, -0.734, -0.386, 0.849, 0.927, -0.957, 0.024,
                -0.422, 2.285, 0.349, 0.705, -0.713, 0.986, 1.785, 1.132, 0.799, -0.778, 1.698, 0.958, 2.176, -0.503,
                0.216, 0.402, 1.469, 1.349, -0.744, 0.025, -0.642, 1.847, -0.28, -0.103, -1.691, -0.139, 0.526, -0.26,
                -0.702, -2.36, 0.057, -0.709, 0.524, -2.121, -1.346, -1.079, 0.083, 0.073, -1.883, -0.952, -1.442,
                1.241, -0.675, -0.293, -1.677};

        double[] result = t2_1.bandPassFilter(this.signal2,4, 12, 30);
        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void Type2BandStopTest1() {
        final double[] out = {0.0, 1.678, 0.48, 0.628, 1.396, 0.007, -0.148, 1.825, 1.594, 0.187, 0.566, -0.09, -1.954,
                -0.96, 0.729, -0.441, -1.175, -0.433, -1.577, -2.273, 0.266, 1.571, 0.313, 0.713, 1.35, -0.363, -0.313,
                2.104, 1.851, 0.217, 0.654, 0.034, -2.064, -1.164, 0.687, -0.475, -1.316, -0.427, -1.373, -2.192, 0.176,
                1.583, 0.41, 0.672, 1.261, -0.307, -0.24, 2.052, 1.815, 0.261, 0.614, -0.087, -2.076, -1.087, 0.691,
                -0.485, -1.222, -0.341,-1.405, -2.234, 0.192, 1.55, 0.321, 0.652, 1.298, -0.321, -0.264, 2.102, 1.867,
                0.245, 0.609, -0.04, -2.062, -1.126, 0.683, -0.47, -1.257, -0.392, -1.403, -2.22, 0.175, 1.554, 0.371,
                0.684, 1.294, -0.309, -0.242, 2.082, 1.828, 0.236, 0.604, -0.069, -2.077, -1.105, 0.698, -0.472, -1.239,
                -0.36, -1.397, -2.228};

        double[] result = t2_1.bandStopFilter(this.signal1, 4, 7, 28);
        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void Type2BandStopTest2() {
        final double[] out = {0.0, 1.157, 0.111, 0.768, -1.04, 1.526, 0.225, 1.943, -0.178, 0.613, 0.904, 1.418, 1.981,
                -0.262, 1.128, 0.001, 2.789, 0.524, 0.739, -0.577, 0.81, 1.788, 0.359, 0.418, -1.676, 1.048, -0.183,
                1.169, -1.467, -0.919, -0.603, -0.109, 0.275, -2.115, -0.758, -1.933, 0.818, -1.309, -0.891, -2.19,
                -0.889, 0.191, -0.938, -0.581, -2.455, 0.452, -0.611, 0.921, -1.491, -0.668, -0.052, 0.71, 1.268,
                -0.989, 0.554, -0.418, 2.457, 0.403, 0.914, -0.306, 1.021, 2.105, 0.955, 1.223, -0.788, 1.984, 0.798,
                2.198, -0.369, 0.243, 0.603, 1.111, 1.433, -1.061, 0.257, -0.919, 1.74, -0.549, -0.248, -1.647, -0.487,
                0.455, -0.796, -0.596, -2.654, 0.102, -1.081, 0.336, -2.18, -1.474, -0.988, -0.322, 0.188, -2.115,
                -0.611, -1.582, 1.302, -0.753, -0.207, -1.351};

        double[] result = t2_1.bandStopFilter(this.signal2,4, 12, 30);
        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void Type2InterfaceTest1() {
        _IIRFilter interfaceFF = new Chebyshev(100, this.ripple_factor, 2);
        final double[] out = {0.0, 1.157, 0.111, 0.768, -1.04, 1.526, 0.225, 1.943, -0.178, 0.613, 0.904, 1.418, 1.981,
                -0.262, 1.128, 0.001, 2.789, 0.524, 0.739, -0.577, 0.81, 1.788, 0.359, 0.418, -1.676, 1.048, -0.183,
                1.169, -1.467, -0.919, -0.603, -0.109, 0.275, -2.115, -0.758, -1.933, 0.818, -1.309, -0.891, -2.19,
                -0.889, 0.191, -0.938, -0.581, -2.455, 0.452, -0.611, 0.921, -1.491, -0.668, -0.052, 0.71, 1.268,
                -0.989, 0.554, -0.418, 2.457, 0.403, 0.914, -0.306, 1.021, 2.105, 0.955, 1.223, -0.788, 1.984, 0.798,
                2.198, -0.369, 0.243, 0.603, 1.111, 1.433, -1.061, 0.257, -0.919, 1.74, -0.549, -0.248, -1.647, -0.487,
                0.455, -0.796, -0.596, -2.654, 0.102, -1.081, 0.336, -2.18, -1.474, -0.988, -0.322, 0.188, -2.115,
                -0.611, -1.582, 1.302, -0.753, -0.207, -1.351};

        double[] result = interfaceFF.bandStopFilter(this.signal2, 4, 12, 30);
        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void TestExceptionsType1() {
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            double[] result = t2_1.bandStopFilter(this.signal1, 4, 30, 12);;
        });
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            double[] result = t2_1.bandPassFilter(this.signal1, 4, 30, 12);;
        });
    }

    @Test
    public void TestExceptionsType2() {
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            double[] result = t2_1.bandStopFilter(this.signal2, 4, 30, 12);;
        });
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            double[] result = t2_1.bandPassFilter(this.signal2, 4, 30, 12);;
        });
    }
}
