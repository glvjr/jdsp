/*
 * Copyright (c) 2019 - 2023  Sambit Paul
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.github.psambit9791.jdsp;

import com.github.psambit9791.jdsp.signal.Resample;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class TestResamplePoly {

    private double[] input_signal_1 = {1.   ,  0.999,  0.986,  0.931,  0.786,  0.505,  0.071, -0.454, -0.889, -0.973, -0.519,
            0.323,  0.96 ,  0.726, -0.308, -0.999, -0.323,  0.865,  0.595, -0.786};

    private double[] input_signal_2 = {1.   ,  1.129,  1.388,  1.697,  1.957,  2.042,  1.843,  1.335, 0.648,  0.039, -0.288,
            -0.434, -0.764, -1.338, -1.407, -0.246, 1.092,  0.56 , -0.862};


    @Test
    public void MeanTest5() {
        double[] result_1 = {1.0005,  1.0978,  1.1103,  1.0642,  0.9995,  0.9517,  0.9387,
                0.9566,  0.9865,  1.0056,  1.0011,  0.973 ,  0.9315,  0.8883,
                0.8515,  0.82  ,  0.7864,  0.7419,  0.6799,  0.5997,  0.5052,
                0.4035,  0.2975,  0.1873,  0.0709, -0.0529, -0.1841, -0.3197,
                -0.4544, -0.5837, -0.702 , -0.8052, -0.8897, -0.9526, -0.99  ,
                -0.9983, -0.9737, -0.9127, -0.8151, -0.6828, -0.5194, -0.3305,
                -0.1213,  0.1001,  0.3231,  0.5344,  0.7206,  0.8667,  0.9605,
                0.9937,  0.9648,  0.8747,  0.7264,  0.5233,  0.2734, -0.011 ,
                -0.3083, -0.5884, -0.8153, -0.9583, -0.9997, -0.9397, -0.7927,
                -0.5807, -0.3233, -0.0336,  0.2771,  0.5893,  0.8654,  1.0503,
                1.0841,  0.9296,  0.5953,  0.1471, -0.3072, -0.6477, -0.7866,
                -0.7008, -0.4424, -0.1132};

        Resample r5_1 = new Resample(80, 20, "mean");
        double[] out_1 = r5_1.resampleSignal(this.input_signal_1);
        Assertions.assertArrayEquals(result_1, out_1, 0.001);

        double[] result_2 = {1.0003,  1.0649,  1.1017,  1.1172,  1.1223,  1.1294,  1.1496,
                1.188 ,  1.2442,  1.3135,  1.3886,  1.4635,  1.5324,  1.5935,
                1.6476,  1.6978,  1.7491,  1.8023,  1.8568,  1.91  ,  1.958 ,
                1.9989,  2.0289,  2.0463,  2.0508,  2.043 ,  2.0246,  1.996 ,
                1.9568,  1.9065,  1.8439,  1.7674,  1.6772,  1.574 ,  1.4594,
                1.3355,  1.2045,  1.0685,  0.9292,  0.7884,  0.6481,  0.5116,
                0.3805,  0.2568,  0.1423,  0.0387, -0.0528, -0.1312, -0.1962,
                -0.2481, -0.2885, -0.3202, -0.3463, -0.3712, -0.3994, -0.4346,
                -0.4796, -0.5348, -0.6007, -0.6773, -0.7648, -0.8642, -0.9747,
                -1.0945, -1.2189, -1.3392, -1.4431, -1.5143, -1.5383, -1.5044,
                -1.4082, -1.2533, -1.0471, -0.8022, -0.5318, -0.2465,  0.045 ,
                0.3376,  0.6216,  0.8811,  1.0924,  1.2247,  1.2493,  1.145 ,
                0.9082,  0.56  ,  0.1463, -0.2672, -0.6096, -0.8201, -0.8629,
                -0.7363, -0.4736, -0.1344,  0.2099};
        Resample r5_2 = new Resample(100, 20, "mean");
        double[] out_2 = r5_2.resampleSignal(this.input_signal_2);
        Assertions.assertArrayEquals(result_2, out_2, 0.001);
    }

    @Test
    public void MedianTest5() {
        double[] result_1 = {1.0004,  1.0695,  1.0785,  1.0456,  0.9994,  0.965 ,  0.9551,
                0.9668,  0.9864,  0.9976,  0.9911,  0.9667,  0.9313,  0.8933,
                0.8579,  0.8241,  0.7862,  0.7385,  0.6758,  0.5971,  0.5051,
                0.4055,  0.3   ,  0.1889,  0.0708, -0.0542, -0.1857, -0.3206,
                -0.4546, -0.5831, -0.7012, -0.8048, -0.8898, -0.953 , -0.9904,
                -0.9985, -0.9739, -0.9127, -0.815 , -0.6828, -0.5196, -0.3307,
                -0.1217,  0.0997,  0.3229,  0.5349,  0.7214,  0.8673,  0.9603,
                0.9928,  0.9633,  0.8734,  0.7262,  0.5249,  0.2759, -0.009 ,
                -0.3085, -0.591 , -0.8195, -0.9617, -0.9999, -0.9357, -0.7863,
                -0.5758, -0.3235, -0.04  ,  0.2671,  0.5813,  0.8653,  1.0605,
                1.1006,  0.9429,  0.5951,  0.1285, -0.3391, -0.676 , -0.7868,
                -0.6485, -0.3228,  0.0737};

        Resample r5_1 = new Resample(80, 20, "median");
        double[] out_1 = r5_1.resampleSignal(this.input_signal_1);
        Assertions.assertArrayEquals(result_1, out_1, 0.001);

        double[] result_2 = {1.0002,  1.0489,  1.0805,  1.0992,  1.1127,  1.1293,  1.1569,
                1.1986,  1.2537,  1.3188,  1.3885,  1.459 ,  1.526 ,  1.5876,
                1.6443,  1.6977,  1.7518,  1.8064,  1.8606,  1.9121,  1.9579,
                1.9971,  2.0263,  2.0439,  2.0494,  2.0429,  2.0257,  1.9976,
                1.9583,  1.9073,  1.8438,  1.7667,  1.6762,  1.5731,  1.4589,
                1.3354,  1.2048,  1.069 ,  0.9296,  0.7886,  0.648 ,  0.5114,
                0.3802,  0.2566,  0.1422,  0.0386, -0.0529, -0.1314, -0.1964,
                -0.2484, -0.2886, -0.3199, -0.3458, -0.3707, -0.3991, -0.4347,
                -0.4801, -0.5357, -0.6017, -0.678 , -0.7649, -0.8634, -0.9732,
                -1.0929, -1.2179, -1.3393, -1.4445, -1.5167, -1.5409, -1.5062,
                -1.4083, -1.2512, -1.0433, -0.7982, -0.5291, -0.2466,  0.0417,
                0.3317,  0.6151,  0.8767,  1.0923,  1.23  ,  1.2589,  1.1556,
                0.9155,  0.5599,  0.1367, -0.2852, -0.6309, -0.836 , -0.863 ,
                -0.7105, -0.4145, -0.0396,  0.3377};
        Resample r5_2 = new Resample(100, 20, "median");
        double[] out_2 = r5_2.resampleSignal(this.input_signal_2);
        Assertions.assertArrayEquals(result_2, out_2, 0.001);
    }

    @Test
    public void MaxTest5() {
        double[] result_1 = {1.    ,  1.0002,  1.0004,  1.0001,  0.999 ,  0.9976,  0.9953,
                0.9916,  0.986 ,  0.9779,  0.9665,  0.9511,  0.931 ,  0.9055,
                0.8735,  0.8339,  0.7859,  0.7303,  0.6656,  0.5906,  0.5047,
                0.4103,  0.3062,  0.1927,  0.0704, -0.0575, -0.1895, -0.323 ,
                -0.4549, -0.5816, -0.6993, -0.8036, -0.8902, -0.954 , -0.9914,
                -0.9991, -0.9743, -0.9126, -0.8148, -0.6827, -0.52  , -0.3313,
                -0.1227,  0.0986,  0.3226,  0.536 ,  0.7233,  0.8687,  0.96  ,
                0.9904,  0.9595,  0.8702,  0.7258,  0.5288,  0.2822, -0.0042,
                -0.3088, -0.5975, -0.8296, -0.9699, -1.0003, -0.9258, -0.7707,
                -0.5636, -0.3238, -0.0555,  0.2425,  0.5616,  0.8649,  1.0853,
                1.1408,  0.9755,  0.5947,  0.0829, -0.4172, -0.7453, -0.7871,
                -0.5203, -0.0296,  0.5315};

        Resample r5_1 = new Resample(80, 20, "max");
        double[] out_1 = r5_1.resampleSignal(this.input_signal_1);
        Assertions.assertArrayEquals(result_1, out_1, 0.001);

        double[] result_2 = {0.9993,  0.9046,  0.8878,  0.9363,  1.0257,  1.1284,  1.2232,
                1.2946,  1.3399,  1.3666,  1.3876,  1.4189,  1.4675,  1.5345,
                1.614 ,  1.6968,  1.7762,  1.8432,  1.8945,  1.9311,  1.9569,
                1.9803,  2.002 ,  2.022 ,  2.0368,  2.042 ,  2.0352,  2.0122,
                1.9718,  1.9146,  1.8429,  1.7599,  1.667 ,  1.5651,  1.4543,
                1.3345,  1.2076,  1.0735,  0.9338,  0.7907,  0.6471,  0.5091,
                0.3776,  0.2545,  0.1409,  0.0377, -0.0542, -0.1334, -0.1991,
                -0.2507, -0.2895, -0.3179, -0.3417, -0.3662, -0.3963, -0.4356,
                -0.4847, -0.5438, -0.611 , -0.6848, -0.7658, -0.8561, -0.9597,
                -1.0782, -1.2083, -1.3402, -1.457 , -1.5386, -1.5651, -1.523 ,
                -1.4092, -1.2322, -1.0094, -0.7613, -0.5047, -0.2475,  0.0115,
                0.2786,  0.5567,  0.8366,  1.0914,  1.2777,  1.3451,  1.2516,
                0.9818,  0.559 ,  0.0497, -0.4482, -0.8235, -0.9804, -0.8639,
                -0.4759,  0.1206,  0.8197,  1.4972};
        Resample r5_2 = new Resample(100, 20, "max");
        double[] out_2 = r5_2.resampleSignal(this.input_signal_2);
        Assertions.assertArrayEquals(result_2, out_2, 0.001);
    }

    @Test
    public void MinTest5() {
        double[] result_1 = {1.0013,  1.2368,  1.2668,  1.1554,  1.0003,  0.8864,  0.8582,
                0.9068,  0.9873,  1.0451,  1.0504,  1.0042,  0.9322,  0.864 ,
                0.8201,  0.8002,  0.7871,  0.7583,  0.7003,  0.6126,  0.506 ,
                0.3939,  0.285 ,  0.1796,  0.0717, -0.0464, -0.1765, -0.315 ,
                -0.4537, -0.5866, -0.7059, -0.8075, -0.8889, -0.9505, -0.988 ,
                -0.9971, -0.973 , -0.9128, -0.8156, -0.683 , -0.5187, -0.3293,
                -0.1193,  0.1022,  0.3238,  0.5322,  0.7167,  0.8638,  0.9612,
                0.9985,  0.9724,  0.8813,  0.7271,  0.5156,  0.2609, -0.0206,
                -0.3076, -0.5755, -0.795 , -0.9419, -0.999 , -0.9595, -0.8241,
                -0.6051, -0.3226, -0.0025,  0.3264,  0.6288,  0.8662,  1.0005,
                1.0036,  0.8643,  0.596 ,  0.2383, -0.1508, -0.5088, -0.7859,
                -0.9577, -1.0295, -1.0303};

        Resample r5_1 = new Resample(80, 20, "min");
        double[] out_1 = r5_1.resampleSignal(this.input_signal_1);
        Assertions.assertArrayEquals(result_1, out_1, 0.001);

        double[] result_2 = {1.0016,  1.2617,  1.3645,  1.3395,  1.241 ,  1.1306,  1.0593,
                1.057 ,  1.1266,  1.2483,  1.3898,  1.5182,  1.6121,  1.6659,
                1.6888,  1.699 ,  1.7158,  1.752 ,  1.8105,  1.8841,  1.9592,
                2.0218,  2.0619,  2.0763,  2.068 ,  2.0442,  2.0116,  1.976 ,
                1.9385,  1.8965,  1.8451,  1.7767,  1.6898,  1.585 ,  1.4658,
                1.3368,  1.2007,  1.0622,  0.9235,  0.7857,  0.6493,  0.5148,
                0.3841,  0.2596,  0.144 ,  0.0399, -0.0511, -0.1284, -0.1926,
                -0.245 , -0.2873, -0.3229, -0.3519, -0.3774, -0.4032, -0.4334,
                -0.4732, -0.5238, -0.5881, -0.668 , -0.7636, -0.8742, -0.993 ,
                -1.1145, -1.232 , -1.338 , -1.4259, -1.4843, -1.5052, -1.4815,
                -1.407 , -1.2792, -1.0933, -0.8525, -0.5651, -0.2452,  0.0863,
                0.41  ,  0.7013,  0.9359,  1.0936,  1.1595,  1.1318,  1.0141,
                0.8179,  0.5613,  0.265 , -0.045 , -0.3469, -0.6232, -0.8616,
                -1.0563, -1.2035, -1.3064, -1.3714};
        Resample r5_2 = new Resample(100, 20, "min");
        double[] out_2 = r5_2.resampleSignal(this.input_signal_2);
        Assertions.assertArrayEquals(result_2, out_2, 0.001);
    }

    @Test
    public void ConstantTest5() {
        double[] result_1 = {1.0006,  1.1185,  1.1336,  1.0778,  0.9996,  0.942 ,  0.9267,
                0.9492,  0.9866,  1.0115,  1.0085,  0.9777,  0.9316,  0.8847,
                0.8468,  0.8171,  0.7865,  0.7443,  0.6829,  0.6016,  0.5053,
                0.4021,  0.2956,  0.1862,  0.071 , -0.0519, -0.183 , -0.319 ,
                -0.4543, -0.5841, -0.7026, -0.8056, -0.8896, -0.9522, -0.9897,
                -0.9981, -0.9736, -0.9127, -0.8152, -0.6828, -0.5193, -0.3303,
                -0.121 ,  0.1004,  0.3232,  0.5341,  0.72  ,  0.8663,  0.9606,
                0.9944,  0.966 ,  0.8757,  0.7265,  0.5222,  0.2715, -0.0124,
                -0.3082, -0.5865, -0.8123, -0.9559, -0.9996, -0.9426, -0.7974,
                -0.5844, -0.3232, -0.029 ,  0.2844,  0.5952,  0.8656,  1.0429,
                1.0722,  0.9198,  0.5954,  0.1606, -0.2839, -0.627 , -0.7865,
                -0.7391, -0.5298, -0.2498};

        Resample r5_1 = new Resample(80, 20, "constant");
        double[] out_1 = r5_1.resampleSignal(this.input_signal_1);
        Assertions.assertArrayEquals(result_1, out_1, 0.001);

        double[] result_2 = {1.0007,  1.116 ,  1.17  ,  1.175 ,  1.1532,  1.1297,  1.1262,
                1.1539,  1.2136,  1.2966,  1.3889,  1.4777,  1.5532,  1.6123,
                1.6583,  1.6981,  1.7404,  1.7892,  1.8448,  1.9032,  1.9583,
                2.0049,  2.0375,  2.0541,  2.0553,  2.0433,  2.0213,  1.9908,
                1.9521,  1.9039,  1.8442,  1.7698,  1.6805,  1.5769,  1.4611,
                1.3359,  1.2035,  1.0668,  0.9277,  0.7877,  0.6484,  0.5125,
                0.3814,  0.2575,  0.1428,  0.039 , -0.0523, -0.1305, -0.1952,
                -0.2473, -0.2882, -0.3209, -0.3477, -0.3728, -0.4004, -0.4343,
                -0.4779, -0.532 , -0.5975, -0.6749, -0.7645, -0.8668, -0.9795,
                -1.0997, -1.2223, -1.3389, -1.4386, -1.5065, -1.5297, -1.4984,
                -1.4079, -1.26  , -1.0591, -0.8153, -0.5404, -0.2462,  0.0558,
                0.3564,  0.6423,  0.8954,  1.0927,  1.2077,  1.2188,  1.111 ,
                0.8847,  0.5604,  0.1771, -0.2095, -0.5413, -0.7689, -0.8626,
                -0.8195, -0.6633, -0.4391, -0.2012};
        Resample r5_2 = new Resample(100, 20, "constant");
        double[] out_2 = r5_2.resampleSignal(this.input_signal_2);
        Assertions.assertArrayEquals(result_2, out_2, 0.001);
    }

    @Test
    public void EdgeTest5() {
        double[] result_1 = {1.0006,  1.0001,  1.    ,  1.    ,  0.9996,  0.9975,  0.9949,
                0.9915,  0.9866,  0.9777,  0.9661,  0.951 ,  0.9316,  0.9054,
                0.8731,  0.8338,  0.7865,  0.7302,  0.6652,  0.5905,  0.5053,
                0.4101,  0.3058,  0.1926,  0.071 , -0.0576, -0.1899, -0.3231,
                -0.4543, -0.5818, -0.6997, -0.8038, -0.8896, -0.9541, -0.9918,
                -0.9992, -0.9736, -0.9127, -0.8152, -0.6828, -0.5193, -0.3294,
                -0.1193,  0.1019,  0.3232,  0.5327,  0.7177,  0.8644,  0.9606,
                0.9977,  0.9714,  0.8802,  0.7265,  0.5171,  0.2635, -0.0187,
                -0.3082, -0.5777, -0.7983, -0.9447, -0.9996, -0.9558, -0.8181,
                -0.6006, -0.3232, -0.008 ,  0.3178,  0.6217,  0.8656,  1.0097,
                1.0185,  0.8762,  0.5954,  0.2218, -0.1788, -0.5339, -0.7865,
                -0.911 , -0.9227, -0.8638};

        Resample r5_1 = new Resample(80, 20, "edge");
        double[] out_1 = r5_1.resampleSignal(this.input_signal_1);
        Assertions.assertArrayEquals(result_1, out_1, 0.001);

        double[] result_2 = {1.0007,  1.0125,  1.0315,  1.0577,  1.0908,  1.1297,  1.1737,
                1.2225,  1.2751,  1.3309,  1.3889,  1.4489,  1.5109,  1.5738,
                1.6366,  1.6981,  1.758 ,  1.8153,  1.8688,  1.9169,  1.9583,
                1.9928,  2.0198,  2.038 ,  2.0463,  2.0433,  2.0281,  2.0009,
                1.9614,  1.9092,  1.8442,  1.765 ,  1.6735,  1.5708,  1.4578,
                1.3359,  1.2055,  1.0698,  0.9303,  0.7892,  0.6484,  0.5108,
                0.3792,  0.2557,  0.1419,  0.039 , -0.0516, -0.1289, -0.1933,
                -0.2459, -0.2882, -0.3221, -0.35  , -0.3753, -0.4021, -0.4343,
                -0.4751, -0.5267, -0.5915, -0.6707, -0.7645, -0.8714, -0.9875,
                -1.1085, -1.2282, -1.3389, -1.4308, -1.4926, -1.5144, -1.4881,
                -1.4079, -1.2718, -1.0798, -0.8378, -0.5555, -0.2462,  0.0744,
                0.3895,  0.6787,  0.9202,  1.0927,  1.1782,  1.1658,  1.0519,
                0.8438,  0.5604,  0.2309, -0.1084, -0.4219, -0.6797, -0.8626,
                -0.9646, -0.994 , -0.9701, -0.9182};
        Resample r5_2 = new Resample(100, 20, "edge");
        double[] out_2 = r5_2.resampleSignal(this.input_signal_2);
        Assertions.assertArrayEquals(result_2, out_2, 0.001);
    }


    @Test
    public void MeanTest8() {
        double[] result_1 = {1.    ,  1.0963,  1.1078,  1.062 ,  0.999 ,  0.9538,  0.9423,
                0.9593,  0.986 ,  1.0021,  0.9963,  0.9695,  0.931 ,  0.8914,
                0.856 ,  0.8231,  0.786 ,  0.7376,  0.674 ,  0.5954,  0.505 ,
                0.4063,  0.3011,  0.1896,  0.071 , -0.0549, -0.1866, -0.321 ,
                -0.454 , -0.5814, -0.699 , -0.8029, -0.889 , -0.9532, -0.991 ,
                -0.9987, -0.973 , -0.9119, -0.8148, -0.6828, -0.519 , -0.3286,
                -0.1187,  0.1021,  0.323 ,  0.5322,  0.7167,  0.8633,  0.96  ,
                0.9976,  0.9709,  0.8793,  0.726 ,  0.518 ,  0.2654, -0.0168,
                -0.308 , -0.5809, -0.8045, -0.9503, -0.999 , -0.9462, -0.8024,
                -0.5875, -0.323 , -0.0266,  0.2865,  0.5955,  0.865 ,  1.0437,
                1.0758,  0.9242,  0.595 ,  0.15  , -0.3035, -0.6453, -0.786 ,
                -0.7016, -0.4426, -0.1126};

        Resample r5_1 = new Resample(80, 20, 8.0, "mean");
        double[] out_1 = r5_1.resampleSignal(this.input_signal_1);
        Assertions.assertArrayEquals(result_1, out_1, 0.001);

        double[] result_2 = {1.    ,  1.0639,  1.1   ,  1.1152,  1.1207,  1.129 ,  1.1501,
                1.189 ,  1.2452,  1.3139,  1.388 ,  1.461 ,  1.5285,  1.5892,
                1.6444,  1.697 ,  1.7496,  1.8034,  1.8576,  1.9099,  1.957 ,
                1.9961,  2.0248,  2.042 ,  2.0477,  2.042 ,  2.0254,  1.9978,
                1.9586,  1.9073,  1.843 ,  1.7655,  1.6749,  1.572 ,  1.4581,
                1.335 ,  1.2045,  1.0685,  0.929 ,  0.7881,  0.648 ,  0.511 ,
                0.3795,  0.2558,  0.1417,  0.039 , -0.0514, -0.1288, -0.1935,
                -0.2461, -0.288 , -0.3214, -0.3491, -0.3745, -0.4016, -0.434 ,
                -0.4753, -0.5279, -0.5933, -0.6721, -0.764 , -0.8679, -0.9816,
                -1.102 , -1.2234, -1.338 , -1.4351, -1.502 , -1.5258, -1.4962,
                -1.407 , -1.2585, -1.0566, -0.8121, -0.5378, -0.246 ,  0.0528,
                0.3493,  0.6327,  0.8875,  1.092 ,  1.219 ,  1.2408,  1.1369,
                0.9035,  0.56  ,  0.1506, -0.2609, -0.604 , -0.8168, -0.862 ,
                -0.7368, -0.4741, -0.1342,  0.2105};
        Resample r5_2 = new Resample(100, 20, 8.0, "mean");
        double[] out_2 = r5_2.resampleSignal(this.input_signal_2);
        Assertions.assertArrayEquals(result_2, out_2, 0.001);
    }

    @Test
    public void MedianTest8() {
        double[] result_1 = {1.    ,  1.0684,  1.0765,  1.0439,  0.999 ,  0.9665,  0.9577,
                0.9687,  0.986 ,  0.9951,  0.9877,  0.9642,  0.931 ,  0.8954,
                0.8609,  0.8261,  0.786 ,  0.7354,  0.6713,  0.5938,  0.505 ,
                0.4074,  0.3025,  0.1904,  0.071 , -0.0554, -0.1872, -0.3213,
                -0.454 , -0.5812, -0.6988, -0.8028, -0.889 , -0.9532, -0.9911,
                -0.9987, -0.973 , -0.9119, -0.8148, -0.6828, -0.519 , -0.3287,
                -0.1187,  0.102 ,  0.323 ,  0.5323,  0.7169,  0.8635,  0.96  ,
                0.9972,  0.9703,  0.8787,  0.726 ,  0.5188,  0.2668, -0.0157,
                -0.308 , -0.5825, -0.8072, -0.9526, -0.999 , -0.9432, -0.7975,
                -0.5835, -0.323 , -0.0319,  0.2779,  0.5885,  0.865 ,  1.0531,
                1.0912,  0.937 ,  0.595 ,  0.132 , -0.3347, -0.6732, -0.786 ,
                -0.6493, -0.323 ,  0.0744};

        Resample r5_1 = new Resample(80, 20, 8.0,"median");
        double[] out_1 = r5_1.resampleSignal(this.input_signal_1);
        Assertions.assertArrayEquals(result_1, out_1, 0.001);

        double[] result_2 = {1.    ,  1.0482,  1.0792,  1.0976,  1.1114,  1.129 ,  1.1571,
                1.199 ,  1.254 ,  1.3188,  1.388 ,  1.4571,  1.5229,  1.5842,
                1.6417,  1.697 ,  1.7518,  1.8066,  1.8604,  1.9114,  1.957 ,
                1.9948,  2.023 ,  2.0405,  2.0469,  2.042 ,  2.0261,  1.9987,
                1.9594,  1.9077,  1.843 ,  1.7652,  1.6745,  1.5716,  1.458 ,
                1.335 ,  1.2046,  1.0686,  0.9291,  0.7882,  0.648 ,  0.511 ,
                0.3795,  0.2557,  0.1417,  0.039 , -0.0514, -0.1289, -0.1935,
                -0.2461, -0.288 , -0.3213, -0.349 , -0.3744, -0.4014, -0.434 ,
                -0.4755, -0.5282, -0.5937, -0.6724, -0.764 , -0.8675, -0.9809,
                -1.1011, -1.2228, -1.338 , -1.436 , -1.5035, -1.5276, -1.4974,
                -1.407 , -1.2569, -1.0537, -0.8089, -0.5356, -0.246 ,  0.0501,
                0.3444,  0.6271,  0.8836,  1.092 ,  1.2239,  1.2496,  1.1469,
                0.9105,  0.56  ,  0.1413, -0.2785, -0.6249, -0.8325, -0.862 ,
                -0.711 , -0.4152, -0.0395,  0.3384};
        Resample r5_2 = new Resample(100, 20, 8.0, "median");
        double[] out_2 = r5_2.resampleSignal(this.input_signal_2);
        Assertions.assertArrayEquals(result_2, out_2, 0.001);
    }

    @Test
    public void MaxTest8() {
        double[] result_1 = {1.    ,  1.    ,  1.    ,  0.9997,  0.999 ,  0.9977,  0.9953,
                0.9916,  0.986 ,  0.9779,  0.9665,  0.9512,  0.931 ,  0.9052,
                0.873 ,  0.8335,  0.786 ,  0.7299,  0.6647,  0.5898,  0.505 ,
                0.4102,  0.3058,  0.1924,  0.071 , -0.0568, -0.1887, -0.3222,
                -0.454 , -0.5807, -0.6982, -0.8025, -0.889 , -0.9534, -0.9912,
                -0.9988, -0.973 , -0.9119, -0.8147, -0.6827, -0.519 , -0.3287,
                -0.1189,  0.1018,  0.323 ,  0.5326,  0.7175,  0.864 ,  0.96  ,
                0.9964,  0.9688,  0.8774,  0.726 ,  0.5207,  0.2701, -0.0129,
                -0.308 , -0.5865, -0.8139, -0.958 , -0.999 , -0.9358, -0.7854,
                -0.5736, -0.323 , -0.0449,  0.2567,  0.5712,  0.865 ,  1.076 ,
                1.1289,  0.9681,  0.595 ,  0.0877, -0.4113, -0.7415, -0.786 ,
                -0.5214, -0.03  ,  0.5324};

        Resample r5_1 = new Resample(80, 20, 8.0, "max");
        double[] out_1 = r5_1.resampleSignal(this.input_signal_1);
        Assertions.assertArrayEquals(result_1, out_1, 0.001);

        double[] result_2 = {1.    ,  0.9059,  0.8898,  0.9383,  1.0273,  1.129 ,  1.2207,
                1.2896,  1.3343,  1.3628,  1.388 ,  1.4221,  1.4722,  1.5389,
                1.6167,  1.697 ,  1.7718,  1.8354,  1.8862,  1.9256,  1.957 ,
                1.9837,  2.0071,  2.0265,  2.0393,  2.042 ,  2.0318,  2.0068,
                1.9665,  1.9115,  1.843 ,  1.7624,  1.6707,  1.5685,  1.4564,
                1.335 ,  1.2056,  1.07  ,  0.9302,  0.7887,  0.648 ,  0.5106,
                0.3791,  0.2555,  0.1416,  0.039 , -0.0515, -0.1291, -0.1939,
                -0.2465, -0.288 , -0.3208, -0.3478, -0.373 , -0.4004, -0.4341,
                -0.477 , -0.5313, -0.5974, -0.6752, -0.7641, -0.8637, -0.9738,
                -1.0929, -1.217 , -1.3381, -1.4436, -1.5175, -1.5435, -1.5086,
                -1.4071, -1.2427, -1.028 , -0.78  , -0.5156, -0.246 ,  0.025 ,
                0.2991,  0.5764,  0.8486,  1.092 ,  1.2679,  1.3298,  1.2376,
                0.9742,  0.56  ,  0.0572, -0.4378, -0.8142, -0.9747, -0.8621,
                -0.4769,  0.1195,  0.8199,  1.4983};
        Resample r5_2 = new Resample(100, 20, 8.0, "max");
        double[] out_2 = r5_2.resampleSignal(this.input_signal_2);
        Assertions.assertArrayEquals(result_2, out_2, 0.001);
    }

    @Test
    public void MinTest8() {
        double[] result_1 = {1.    ,  1.2331,  1.2612,  1.1505,  0.999 ,  0.8913,  0.8668,
                0.9134,  0.986 ,  1.0367,  1.0388,  0.9956,  0.931 ,  0.8717,
                0.8318,  0.8083,  0.786 ,  0.7486,  0.6873,  0.6034,  0.505 ,
                0.4006,  0.2944,  0.1857,  0.071 , -0.0522, -0.1836, -0.3193,
                -0.454 , -0.5824, -0.7001, -0.8035, -0.889 , -0.9528, -0.9907,
                -0.9986, -0.973 , -0.9119, -0.8148, -0.6828, -0.519 , -0.3285,
                -0.1184,  0.1024,  0.323 ,  0.5316,  0.7156,  0.8623,  0.96  ,
                0.9993,  0.9739,  0.8819,  0.726 ,  0.514 ,  0.2587, -0.0225,
                -0.308 , -0.5729, -0.7913, -0.9393, -0.999 , -0.961 , -0.8265,
                -0.6072, -0.323 , -0.0005,  0.329 ,  0.63  ,  0.865 ,  0.9978,
                1.0004,  0.8618,  0.595 ,  0.2386, -0.1501, -0.5084, -0.786 ,
                -0.958 , -1.0295, -1.03};

        Resample r5_1 = new Resample(80, 20, 8.0, "min");
        double[] out_1 = r5_1.resampleSignal(this.input_signal_1);
        Assertions.assertArrayEquals(result_1, out_1, 0.001);

        double[] result_2 = {1.0001,  1.2579,  1.3583,  1.3325,  1.2355,  1.1291,  1.0633,
                1.0653,  1.1358,  1.2538,  1.3881,  1.5088,  1.5976,  1.651 ,
                1.6786,  1.6971,  1.7224,  1.764 ,  1.8224,  1.8905,  1.9571,
                2.0113,  2.0466,  2.0612,  2.0581,  2.0421,  2.0175,  1.9867,
                1.949 ,  1.9022,  1.8431,  1.7692,  1.68  ,  1.5762,  1.4603,
                1.3351,  1.2031,  1.0666,  0.9275,  0.7874,  0.648 ,  0.5115,
                0.3801,  0.2561,  0.1419,  0.039 , -0.0512, -0.1285, -0.1929,
                -0.2456, -0.288 , -0.3222, -0.3506, -0.3764, -0.403 , -0.434 ,
                -0.4731, -0.5236, -0.5882, -0.6684, -0.764 , -0.873 , -0.9913,
                -1.113 , -1.2313, -1.338 , -1.4247, -1.4828, -1.5041, -1.4809,
                -1.407 , -1.2778, -1.0917, -0.8515, -0.5651, -0.246 ,  0.087 ,
                0.4111,  0.7018,  0.9353,  1.0921,  1.1589,  1.1313,  1.0133,
                0.8167,  0.56  ,  0.2655, -0.0436, -0.3457, -0.6228, -0.862 ,
                -1.0562, -1.2033, -1.3063, -1.3715};
        Resample r5_2 = new Resample(100, 20, 8.0, "min");
        double[] out_2 = r5_2.resampleSignal(this.input_signal_2);
        Assertions.assertArrayEquals(result_2, out_2, 0.001);
    }

    @Test
    public void ConstantTest8() {
        double[] result_1 = {1.    ,  1.1166,  1.1307,  1.0751,  0.999 ,  0.9445,  0.931 ,
                0.9525,  0.986 ,  1.0073,  1.0027,  0.9734,  0.931 ,  0.8884,
                0.8524,  0.8209,  0.786 ,  0.7393,  0.676 ,  0.5966,  0.505 ,
                0.4054,  0.3001,  0.189 ,  0.071 , -0.0545, -0.1861, -0.3207,
                -0.454 , -0.5815, -0.6992, -0.803 , -0.889 , -0.9531, -0.991 ,
                -0.9987, -0.973 , -0.9119, -0.8148, -0.6828, -0.519 , -0.3286,
                -0.1186,  0.1021,  0.323 ,  0.5321,  0.7166,  0.8632,  0.96  ,
                0.9978,  0.9713,  0.8797,  0.726 ,  0.5174,  0.2644, -0.0177,
                -0.308 , -0.5797, -0.8026, -0.9487, -0.999 , -0.9484, -0.806 ,
                -0.5904, -0.323 , -0.0227,  0.2929,  0.6007,  0.865 ,  1.0369,
                1.0646,  0.9149,  0.595 ,  0.1632, -0.2806, -0.6249, -0.786 ,
                -0.7398, -0.53  , -0.2492};

        Resample r5_1 = new Resample(80, 20, 8.0, "constant");
        double[] out_1 = r5_1.resampleSignal(this.input_signal_1);
        Assertions.assertArrayEquals(result_1, out_1, 0.001);

        double[] result_2 = {1.    ,  1.1143,  1.1672,  1.1717,  1.1506,  1.129 ,  1.1275,
                1.1568,  1.2167,  1.2983,  1.388 ,  1.4734,  1.5464,  1.6052,
                1.6533,  1.697 ,  1.7425,  1.7931,  1.8484,  1.9049,  1.957 ,
                2.    ,  2.0304,  2.047 ,  2.0504,  2.042 ,  2.0234,  1.9949,
                1.9562,  1.906 ,  1.843 ,  1.7665,  1.6762,  1.5731,  1.4587,
                1.335 ,  1.2041,  1.068 ,  0.9286,  0.7879,  0.648 ,  0.5112,
                0.3797,  0.2559,  0.1418,  0.039 , -0.0513, -0.1287, -0.1934,
                -0.246 , -0.288 , -0.3216, -0.3495, -0.375 , -0.4019, -0.434 ,
                -0.4747, -0.5267, -0.592 , -0.6711, -0.764 , -0.8692, -0.9841,
                -1.1048, -1.2255, -1.338 , -1.4324, -1.497 , -1.5202, -1.4922,
                -1.407 , -1.2635, -1.0657, -0.8223, -0.5449, -0.246 ,  0.0617,
                0.3654,  0.6507,  0.8999,  1.092 ,  1.2034,  1.2123,  1.1048,
                0.881 ,  0.56  ,  0.1805, -0.2044, -0.5368, -0.7663, -0.862 ,
                -0.8199, -0.6637, -0.4389, -0.2008};
        Resample r5_2 = new Resample(100, 20, 8.0, "constant");
        double[] out_2 = r5_2.resampleSignal(this.input_signal_2);
        Assertions.assertArrayEquals(result_2, out_2, 0.001);
    }

    @Test
    public void EdgeTest8() {
        double[] result_1 = {1.    ,  1.    ,  0.9999,  0.9997,  0.999 ,  0.9977,  0.9953,
                0.9916,  0.986 ,  0.9779,  0.9665,  0.9512,  0.931 ,  0.9052,
                0.873 ,  0.8335,  0.786 ,  0.7299,  0.6647,  0.5898,  0.505 ,
                0.4102,  0.3058,  0.1924,  0.071 , -0.0568, -0.1887, -0.3222,
                -0.454 , -0.5807, -0.6982, -0.8025, -0.889 , -0.9534, -0.9912,
                -0.9988, -0.973 , -0.9119, -0.8148, -0.6828, -0.519 , -0.3285,
                -0.1184,  0.1023,  0.323 ,  0.5317,  0.7158,  0.8625,  0.96  ,
                0.999 ,  0.9734,  0.8814,  0.726 ,  0.5147,  0.2599, -0.0215,
                -0.308 , -0.5744, -0.7937, -0.9413, -0.999 , -0.9583, -0.8222,
                -0.6036, -0.323 , -0.0052,  0.3213,  0.6238,  0.865 ,  1.0061,
                1.0141,  0.8731,  0.595 ,  0.2225, -0.1779, -0.5332, -0.786 ,
                -0.9114, -0.923 , -0.8635};

        Resample r5_1 = new Resample(80, 20, 8.0, "edge");
        double[] out_1 = r5_1.resampleSignal(this.input_signal_1);
        Assertions.assertArrayEquals(result_1, out_1, 0.001);

        double[] result_2 = {1.    ,  1.0123,  1.0313,  1.0574,  1.0902,  1.129 ,  1.1732,
                1.2218,  1.2743,  1.3299,  1.388 ,  1.4483,  1.5101,  1.5727,
                1.6354,  1.697 ,  1.7569,  1.8138,  1.8669,  1.915 ,  1.957 ,
                1.992 ,  2.019 ,  2.0369,  2.0449,  2.042 ,  2.0275,  2.0007,
                1.9612,  1.9086,  1.843 ,  1.7645,  1.6735,  1.5708,  1.4576,
                1.335 ,  1.2048,  1.069 ,  0.9294,  0.7883,  0.648 ,  0.5109,
                0.3794,  0.2557,  0.1417,  0.039 , -0.0513, -0.1286, -0.1931,
                -0.2457, -0.288 , -0.3219, -0.3502, -0.3759, -0.4026, -0.434 ,
                -0.4737, -0.5248, -0.5896, -0.6694, -0.764 , -0.8715, -0.9885,
                -1.1099, -1.229 , -1.338 , -1.4277, -1.4883, -1.5103, -1.4853,
                -1.407 , -1.2723, -1.0817, -0.8402, -0.5573, -0.246 ,  0.0772,
                0.3934,  0.682 ,  0.9216,  1.092 ,  1.1761,  1.1627,  1.0487,
                0.8416,  0.56  ,  0.2325, -0.1059, -0.4197, -0.6784, -0.862 ,
                -0.9646, -0.9943, -0.9703, -0.918};
        Resample r5_2 = new Resample(100, 20, 8.0, "edge");
        double[] out_2 = r5_2.resampleSignal(this.input_signal_2);
        Assertions.assertArrayEquals(result_2, out_2, 0.001);
    }

    @Test
    public void ConstantTest5_C5() {
        double[] result_1 = {1.0006,  0.5262,  0.4653,  0.6887,  0.9996,  1.2196,  1.2678,
                1.1607,  0.9866,  0.8427,  0.7966,  0.8443,  0.9316,  0.988 ,
                0.9783,  0.9009,  0.7865,  0.6736,  0.5942,  0.5461,  0.5053,
                0.4425,  0.3468,  0.2185,  0.071 , -0.0803, -0.2174, -0.3396,
                -0.4543, -0.5724, -0.688 , -0.7966, -0.8896, -0.9618, -1.0002,
                -1.0037, -0.9736, -0.9127, -0.8152, -0.6828, -0.5193, -0.336 ,
                -0.1315,  0.0909,  0.3232,  0.5431,  0.7346,  0.878 ,  0.9606,
                0.9738,  0.9316,  0.8473,  0.7265,  0.5545,  0.3227,  0.028 ,
                -0.3082, -0.642 , -0.901 , -1.0266, -0.9996, -0.8589, -0.6659,
                -0.4811, -0.3232, -0.1623,  0.0725,  0.4263,  0.8656,  1.2544,
                1.4132,  1.1974,  0.5954, -0.2285, -0.9523, -1.2193, -0.7865,
                0.3545,  1.9692,  3.6561};

        Resample r5_1 = new Resample(80, 20, "constant", 5.0);
        double[] out_1 = r5_1.resampleSignal(this.input_signal_1);
        Assertions.assertArrayEquals(result_1, out_1, 0.001);

        double[] result_2 = {1.0007,  0.5984,  0.4774,  0.5887,  0.8411,  1.1297,  1.3638,
                1.4966,  1.5211,  1.468 ,  1.3889,  1.3339,  1.3418,  1.42  ,
                1.55  ,  1.6981,  1.8281,  1.9197,  1.9648,  1.9714,  1.9583,
                1.9447,  1.949 ,  1.9737,  2.0102,  2.0433,  2.0556,  2.0416,
                1.9986,  1.9302,  1.8442,  1.7455,  1.6457,  1.5462,  1.4445,
                1.3359,  1.2136,  1.0815,  0.9408,  0.795 ,  0.6484,  0.5042,
                0.3704,  0.2485,  0.1383,  0.039 , -0.0567, -0.1394, -0.2063,
                -0.2556, -0.2882, -0.3136, -0.3346, -0.3582, -0.3904, -0.4343,
                -0.4945, -0.5627, -0.6323, -0.6992, -0.7645, -0.8406, -0.9329,
                -1.0488, -1.188 , -1.3389, -1.4837, -1.5869, -1.6182, -1.5586,
                -1.4079, -1.1918, -0.9391, -0.6848, -0.4528, -0.2462, -0.0525,
                0.1641,  0.431 ,  0.7515,  1.0927,  1.3792,  1.5263,  1.4536,
                1.1224,  0.5604, -0.1349, -0.7957, -1.234 , -1.2866, -0.8626,
                0.0219,  1.2546,  2.6413,  3.9574};
        Resample r5_2 = new Resample(100, 20, "constant", 5.0);
        double[] out_2 = r5_2.resampleSignal(this.input_signal_2);
        Assertions.assertArrayEquals(result_2, out_2, 0.001);
    }

    @Test
    public void ConstantTest5_C10() {
        double[] result_1 = {1.0006, -0.0661, -0.2031,  0.2995,  0.9996,  1.4971,  1.6088,
                1.3722,  0.9866,  0.6738,  0.5847,  0.711 ,  0.9316,  1.0912,
                1.1099,  0.9846,  0.7865,  0.6029,  0.5055,  0.4905,  0.5053,
                0.4828,  0.398 ,  0.2509,  0.071 , -0.1087, -0.2518, -0.3603,
                -0.4543, -0.5606, -0.6735, -0.7876, -0.8896, -0.9713, -1.0107,
                -1.0094, -0.9736, -0.9127, -0.8152, -0.6828, -0.5193, -0.3416,
                -0.142 ,  0.0814,  0.3232,  0.5521,  0.7491,  0.8898,  0.9606,
                0.9531,  0.8972,  0.819 ,  0.7265,  0.5869,  0.3739,  0.0684,
                -0.3082, -0.6976, -0.9897, -1.0973, -0.9996, -0.7751, -0.5343,
                -0.3778, -0.3232, -0.2957, -0.1394,  0.2575,  0.8656,  1.466 ,
                1.7542,  1.4749,  0.5954, -0.6176, -1.6207, -1.8116, -0.7865,
                1.448 ,  4.4682,  7.5619};

        Resample r5_1 = new Resample(80, 20, "constant", 10.0);
        double[] out_1 = r5_1.resampleSignal(this.input_signal_1);
        Assertions.assertArrayEquals(result_1, out_1, 0.001);

        double[] result_2 = {1.0007,  0.0807, -0.2153,  0.0025,  0.5291,  1.1297,  1.6014,
                1.8393,  1.8286,  1.6395,  1.3889,  1.1901,  1.1305,  1.2277,
                1.4417,  1.6981,  1.9158,  2.0501,  2.0848,  2.0396,  1.9583,
                1.8845,  1.8604,  1.8933,  1.9651,  2.0433,  2.0899,  2.0925,
                2.0452,  1.9565,  1.8442,  1.7212,  1.6109,  1.5155,  1.4278,
                1.3359,  1.2236,  1.0961,  0.954 ,  0.8022,  0.6484,  0.4959,
                0.3593,  0.2395,  0.1339,  0.039 , -0.0612, -0.1484, -0.2174,
                -0.2639, -0.2882, -0.3064, -0.3215, -0.3436, -0.3803, -0.4343,
                -0.5112, -0.5933, -0.6671, -0.7235, -0.7645, -0.8143, -0.8863,
                -0.9979, -1.1537, -1.3389, -1.5287, -1.6673, -1.7067, -1.6188,
                -1.4079, -1.1236, -0.8191, -0.5544, -0.3651, -0.2462, -0.1609,
                -0.0282,  0.2196,  0.6077,  1.0927,  1.5506,  1.8338,  1.7963,
                1.36  ,  0.5604, -0.447 , -1.382 , -1.9267, -1.8043, -0.8626,
                0.8634,  3.1725,  5.7218,  8.1161};
        Resample r5_2 = new Resample(100, 20, "constant", 10.0);
        double[] out_2 = r5_2.resampleSignal(this.input_signal_2);
        Assertions.assertArrayEquals(result_2, out_2, 0.001);
    }
}
