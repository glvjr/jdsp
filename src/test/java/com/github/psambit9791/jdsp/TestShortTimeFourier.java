/*
 * Copyright (c) 2019 - 2023  Sambit Paul
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.github.psambit9791.jdsp;

import com.github.psambit9791.jdsp.transform.ShortTimeFourier;
import com.github.psambit9791.jdsp.windows.Rectangular;
import com.github.psambit9791.jdsp.windows.Hanning;
import com.github.psambit9791.jdsp.windows._Window;
import org.apache.commons.math3.complex.Complex;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.io.IOException;

public class TestShortTimeFourier {
    // Linear chirp signal starting at 0 Hz, ending at 10 Hz, sampled @ 100 Hz
    private double[] signal1 = {0,  0.0032054,  0.012821,   0.028844    ,0.051264,  0.080049,   0.11514,    0.15642,
            0.20371,    0.25673,    0.31508,    0.3782,     0.44536,    0.5156,     0.58773,    0.66029,
            0.73154,    0.79944,    0.86167,    0.91566,    0.95863,    0.98767,    0.99981,    0.99222,
            0.96229,    0.90789,    0.82756,    0.72074,    0.58799,    0.43124,    0.25394,    0.061185,
            -0.14025,   -0.34202,   -0.53442,   -0.70682,   -0.8482,    -0.9479,    -0.99649,   -0.98675,
            -0.91462,   -0.78017,   -0.58825,   -0.34894,   -0.077492,  0.20622,    0.4789,     0.71561,
            0.89212,    0.98757,    0.98731,    0.88551,    0.68706,    0.40855,    0.077812,   -0.26817,
            -0.58696,   -0.83575,   -0.97747,   -0.98685,   -0.85575,   -0.59652,   -0.24245,   0.15515,
            0.53361,    0.82846,    0.98481,    0.96847,    0.77473,    0.4324,     0.0016027,  -0.43529,
            -0.78872,   -0.9806,    -0.96272,   -0.73066,   -0.32904,   0.15452,    0.60676,    0.91488,
            0.99558,    0.81957,    0.42429,    -0.090588,  -0.58592,   -0.91986,   -0.9895,    -0.76512,
            -0.30533,   0.25425,    0.73849,    0.98726,    0.9103,     0.52354,    -0.048382,  -0.60854,
            -0.95404,   -0.95102,   -0.59032,   -2.9398e-15};

    // 5 Hz sine wave, sampled @ 100 Hz
    private double[] signal2 = {0,  0.0032054,  0.012821,   0.028844    ,0.051264,  0.080049,   0.11514,    0.15642,
            0.20371,    0.25673,    0.31508,    0.3782,     0.44536,    0.5156,     0.58773,    0.66029,
            0.73154,    0.79944,    0.86167,    0.91566,    0.95863,    0.98767,    0.99981,    0.99222,
            0.96229,    0.90789,    0.82756,    0.72074,    0.58799,    0.43124,    0.25394,    0.061185,
            -0.14025,   -0.34202,   -0.53442,   -0.70682,   -0.8482,    -0.9479,    -0.99649,   -0.98675,
            -0.91462,   -0.78017,   -0.58825,   -0.34894,   -0.077492,  0.20622,    0.4789,     0.71561,
            0.89212,    0.98757,    0.98731,    0.88551,    0.68706,    0.40855,    0.077812,   -0.26817,
            -0.58696,   -0.83575,   -0.97747,   -0.98685,   -0.85575,   -0.59652,   -0.24245,   0.15515,
            0.53361,    0.82846,    0.98481,    0.96847,    0.77473,    0.4324,     0.0016027,  -0.43529,
            -0.78872,   -0.9806,    -0.96272,   -0.73066,   -0.32904,   0.15452,    0.60676,    0.91488,
            0.99558,    0.81957,    0.42429,    -0.090588,  -0.58592,   -0.91986,   -0.9895,    -0.76512,
            -0.30533,   0.25425,    0.73849,    0.98726,    0.9103,     0.52354,    -0.048382,  -0.60854,
            -0.95404,   -0.95102,   -0.59032,   -2.9398e-15};

    @Test
    @Order(1)
    public void createTestOutputDirectory() {
        String dirName = "./test_outputs/";
        File directory = new File(dirName);
        if (! directory.exists()){
            directory.mkdir();
        }
    }

    @Test
    public void testSTFT1() {
        // Results calculated with MATLAB R2020b Update 4 9.9.0.1570001
        double[][] resultReal = {{9.613440e-02,4.317170e-01,1.047080e+00,1.910970e+00,2.940520e+00,3.968600e+00,4.723440e+00,4.849880e+00,4.006470e+00,2.055095e+00,-7.015650e-01,-3.379360e+00,-4.693960e+00,-3.618730e+00,-3.295620e-01,3.280420e+00,4.439570e+00,1.790762e+00,-2.590538e+00,-4.252340e+00,-1.005960e+00,3.470500e+00,3.162013e+00,-1.770607e+00,-3.791740e+00,6.164600e-01,3.761080e+00,-3.525080e-01,-3.565730e+00,9.095500e-01,3.111208e+00,-2.038442e+00},
                {-1.687572e-02,-6.488933e-02,-1.116623e-01,-1.528498e-01,-1.789219e-01,-1.745634e-01,-1.210070e-01,-4.050086e-03,1.719413e-01,3.670238e-01,4.978670e-01,4.579555e-01,1.807245e-01,-2.701365e-01,-6.522333e-01,-6.412967e-01,-1.055341e-01,6.214790e-01,8.438846e-01,1.685551e-01,-8.045631e-01,-8.476480e-01,3.079903e-01,1.120118e+00,1.765522e-01,-1.165514e+00,-4.479009e-01,1.213737e+00,4.549929e-01,-1.357536e+00,-1.313817e-01,1.478862e+00},
                {-3.119148e-02,-7.885917e-02,-1.240277e-01,-1.608102e-01,-1.779381e-01,-1.590116e-01,-8.653801e-02,4.828509e-02,2.305487e-01,4.072787e-01,4.877655e-01,3.766745e-01,4.575547e-02,-3.873735e-01,-6.536107e-01,-4.833633e-01,1.160491e-01,6.969150e-01,6.459144e-01,-1.317601e-01,-8.318319e-01,-4.997270e-01,5.730284e-01,8.461856e-01,-2.524822e-01,-9.693661e-01,8.426091e-02,1.011442e+00,-1.369279e-01,-1.010039e+00,4.220027e-01,8.492094e-01},
                {-3.119148e-02,-7.885917e-02,-1.240277e-01,-1.608102e-01,-1.779381e-01,-1.590116e-01,-8.653801e-02,4.828509e-02,2.305487e-01,4.072787e-01,4.877655e-01,3.766745e-01,4.575547e-02,-3.873735e-01,-6.536107e-01,-4.833633e-01,1.160491e-01,6.969150e-01,6.459144e-01,-1.317601e-01,-8.318319e-01,-4.997270e-01,5.730284e-01,8.461856e-01,-2.524822e-01,-9.693661e-01,8.426091e-02,1.011442e+00,-1.369279e-01,-1.010039e+00,4.220027e-01,8.492094e-01},
                {-1.687572e-02,-6.488933e-02,-1.116623e-01,-1.528498e-01,-1.789219e-01,-1.745634e-01,-1.210070e-01,-4.050086e-03,1.719413e-01,3.670238e-01,4.978670e-01,4.579555e-01,1.807245e-01,-2.701365e-01,-6.522333e-01,-6.412967e-01,-1.055341e-01,6.214790e-01,8.438846e-01,1.685551e-01,-8.045631e-01,-8.476480e-01,3.079903e-01,1.120118e+00,1.765522e-01,-1.165514e+00,-4.479009e-01,1.213737e+00,4.549929e-01,-1.357536e+00,-1.313817e-01,1.478862e+00}};
        double[][] resultImag = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {5.512453e-02,1.206353e-01,1.820590e-01,2.301815e-01,2.480208e-01,2.116864e-01,9.710069e-02,-1.050135e-01,-3.670302e-01,-6.052357e-01,-6.850514e-01,-4.763439e-01,3.737619e-02,6.508014e-01,9.540844e-01,5.875239e-01,-3.456385e-01,-1.102881e+00,-8.208195e-01,4.393636e-01,1.308521e+00,5.054767e-01,-1.120762e+00,-1.141871e+00,7.560718e-01,1.448858e+00,-5.700349e-01,-1.569511e+00,7.163400e-01,1.513955e+00,-1.212286e+00,-1.061540e+00},
                {1.300936e-02,2.843562e-02,4.283299e-02,5.398974e-02,5.791769e-02,4.903877e-02,2.184345e-02,-2.556410e-02,-8.644065e-02,-1.410259e-01,-1.581932e-01,-1.085771e-01,1.029820e-02,1.499716e-01,2.167660e-01,1.311177e-01,-7.981779e-02,-2.469196e-01,-1.803027e-01,9.923328e-02,2.861337e-01,1.069066e-01,-2.427352e-01,-2.411924e-01,1.622752e-01,3.010520e-01,-1.209661e-01,-3.189828e-01,1.478136e-01,2.992257e-01,-2.409045e-01,-2.019673e-01},
                {-1.300936e-02,-2.843562e-02,-4.283299e-02,-5.398974e-02,-5.791769e-02,-4.903877e-02,-2.184345e-02,2.556410e-02,8.644065e-02,1.410259e-01,1.581932e-01,1.085771e-01,-1.029820e-02,-1.499716e-01,-2.167660e-01,-1.311177e-01,7.981779e-02,2.469196e-01,1.803027e-01,-9.923328e-02,-2.861337e-01,-1.069066e-01,2.427352e-01,2.411924e-01,-1.622752e-01,-3.010520e-01,1.209661e-01,3.189828e-01,-1.478136e-01,-2.992257e-01,2.409045e-01,2.019673e-01},
                {-5.512453e-02,-1.206353e-01,-1.820590e-01,-2.301815e-01,-2.480208e-01,-2.116864e-01,-9.710069e-02,1.050135e-01,3.670302e-01,6.052357e-01,6.850514e-01,4.763439e-01,-3.737619e-02,-6.508014e-01,-9.540844e-01,-5.875239e-01,3.456385e-01,1.102881e+00,8.208195e-01,-4.393636e-01,-1.308521e+00,-5.054767e-01,1.120762e+00,1.141871e+00,-7.560718e-01,-1.448858e+00,5.700349e-01,1.569511e+00,-7.163400e-01,-1.513955e+00,1.212286e+00,1.061540e+00}};

        int frameLength = 5;
        int overlap = 2;

        ShortTimeFourier stft = new ShortTimeFourier(signal1, frameLength, overlap);
        stft.transform();
        Complex[][] out = stft.getComplex(false);

        for (int c = 0; c < out[0].length; c++) {
            for (int r = 0; r < out.length; r++) {
                Assertions.assertEquals(resultReal[r][c], out[r][c].getReal(), 0.001);
                Assertions.assertEquals(resultImag[r][c], out[r][c].getImaginary(), 0.001);
            }
        }
    }

    @Test
    public void testSTFT2() {
        // Results calculated with MATLAB R2020b Update 4 9.9.0.1570001
        double[][] resultReal = {{9.613440e-02,4.317170e-01,1.047080e+00,1.910970e+00,2.940520e+00,3.968600e+00,4.723440e+00,4.849880e+00,4.006470e+00,2.055095e+00,-7.015650e-01,-3.379360e+00,-4.693960e+00,-3.618730e+00,-3.295620e-01,3.280420e+00,4.439570e+00,1.790762e+00,-2.590538e+00,-4.252340e+00,-1.005960e+00,3.470500e+00,3.162013e+00,-1.770607e+00,-3.791740e+00,6.164600e-01,3.761080e+00,-3.525080e-01,-3.565730e+00,9.095500e-01,3.111208e+00,-2.038442e+00},
                {-1.687572e-02,-6.488933e-02,-1.116623e-01,-1.528498e-01,-1.789219e-01,-1.745634e-01,-1.210070e-01,-4.050086e-03,1.719413e-01,3.670238e-01,4.978670e-01,4.579555e-01,1.807245e-01,-2.701365e-01,-6.522333e-01,-6.412967e-01,-1.055341e-01,6.214790e-01,8.438846e-01,1.685551e-01,-8.045631e-01,-8.476480e-01,3.079903e-01,1.120118e+00,1.765522e-01,-1.165514e+00,-4.479009e-01,1.213737e+00,4.549929e-01,-1.357536e+00,-1.313817e-01,1.478862e+00},
                {-3.119148e-02,-7.885917e-02,-1.240277e-01,-1.608102e-01,-1.779381e-01,-1.590116e-01,-8.653801e-02,4.828509e-02,2.305487e-01,4.072787e-01,4.877655e-01,3.766745e-01,4.575547e-02,-3.873735e-01,-6.536107e-01,-4.833633e-01,1.160491e-01,6.969150e-01,6.459144e-01,-1.317601e-01,-8.318319e-01,-4.997270e-01,5.730284e-01,8.461856e-01,-2.524822e-01,-9.693661e-01,8.426091e-02,1.011442e+00,-1.369279e-01,-1.010039e+00,4.220027e-01,8.492094e-01},
                {-3.119148e-02,-7.885917e-02,-1.240277e-01,-1.608102e-01,-1.779381e-01,-1.590116e-01,-8.653801e-02,4.828509e-02,2.305487e-01,4.072787e-01,4.877655e-01,3.766745e-01,4.575547e-02,-3.873735e-01,-6.536107e-01,-4.833633e-01,1.160491e-01,6.969150e-01,6.459144e-01,-1.317601e-01,-8.318319e-01,-4.997270e-01,5.730284e-01,8.461856e-01,-2.524822e-01,-9.693661e-01,8.426091e-02,1.011442e+00,-1.369279e-01,-1.010039e+00,4.220027e-01,8.492094e-01},
                {-1.687572e-02,-6.488933e-02,-1.116623e-01,-1.528498e-01,-1.789219e-01,-1.745634e-01,-1.210070e-01,-4.050086e-03,1.719413e-01,3.670238e-01,4.978670e-01,4.579555e-01,1.807245e-01,-2.701365e-01,-6.522333e-01,-6.412967e-01,-1.055341e-01,6.214790e-01,8.438846e-01,1.685551e-01,-8.045631e-01,-8.476480e-01,3.079903e-01,1.120118e+00,1.765522e-01,-1.165514e+00,-4.479009e-01,1.213737e+00,4.549929e-01,-1.357536e+00,-1.313817e-01,1.478862e+00}};
        double[][] resultImag = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {5.512453e-02,1.206353e-01,1.820590e-01,2.301815e-01,2.480208e-01,2.116864e-01,9.710069e-02,-1.050135e-01,-3.670302e-01,-6.052357e-01,-6.850514e-01,-4.763439e-01,3.737619e-02,6.508014e-01,9.540844e-01,5.875239e-01,-3.456385e-01,-1.102881e+00,-8.208195e-01,4.393636e-01,1.308521e+00,5.054767e-01,-1.120762e+00,-1.141871e+00,7.560718e-01,1.448858e+00,-5.700349e-01,-1.569511e+00,7.163400e-01,1.513955e+00,-1.212286e+00,-1.061540e+00},
                {1.300936e-02,2.843562e-02,4.283299e-02,5.398974e-02,5.791769e-02,4.903877e-02,2.184345e-02,-2.556410e-02,-8.644065e-02,-1.410259e-01,-1.581932e-01,-1.085771e-01,1.029820e-02,1.499716e-01,2.167660e-01,1.311177e-01,-7.981779e-02,-2.469196e-01,-1.803027e-01,9.923328e-02,2.861337e-01,1.069066e-01,-2.427352e-01,-2.411924e-01,1.622752e-01,3.010520e-01,-1.209661e-01,-3.189828e-01,1.478136e-01,2.992257e-01,-2.409045e-01,-2.019673e-01},
                {-1.300936e-02,-2.843562e-02,-4.283299e-02,-5.398974e-02,-5.791769e-02,-4.903877e-02,-2.184345e-02,2.556410e-02,8.644065e-02,1.410259e-01,1.581932e-01,1.085771e-01,-1.029820e-02,-1.499716e-01,-2.167660e-01,-1.311177e-01,7.981779e-02,2.469196e-01,1.803027e-01,-9.923328e-02,-2.861337e-01,-1.069066e-01,2.427352e-01,2.411924e-01,-1.622752e-01,-3.010520e-01,1.209661e-01,3.189828e-01,-1.478136e-01,-2.992257e-01,2.409045e-01,2.019673e-01},
                {-5.512453e-02,-1.206353e-01,-1.820590e-01,-2.301815e-01,-2.480208e-01,-2.116864e-01,-9.710069e-02,1.050135e-01,3.670302e-01,6.052357e-01,6.850514e-01,4.763439e-01,-3.737619e-02,-6.508014e-01,-9.540844e-01,-5.875239e-01,3.456385e-01,1.102881e+00,8.208195e-01,-4.393636e-01,-1.308521e+00,-5.054767e-01,1.120762e+00,1.141871e+00,-7.560718e-01,-1.448858e+00,5.700349e-01,1.569511e+00,-7.163400e-01,-1.513955e+00,1.212286e+00,1.061540e+00}};

        int frameLength = 5;
        int overlap = 2;

        ShortTimeFourier stft = new ShortTimeFourier(signal2, frameLength, overlap);
        stft.transform();
        Complex[][] out = stft.getComplex(false);

        for (int c = 0; c < out[0].length; c++) {
            for (int r = 0; r < out.length; r++) {
                Assertions.assertEquals(resultReal[r][c], out[r][c].getReal(), 0.001);
                Assertions.assertEquals(resultImag[r][c], out[r][c].getImaginary(), 0.001);
            }
        }
    }

    @Test
    public void testSTFTPositive1() {
        // Results calculated with MATLAB R2020b Update 4 9.9.0.1570001
        double[][] resultReal = {{9.613440e-02,4.317170e-01,1.047080e+00,1.910970e+00,2.940520e+00,3.968600e+00,4.723440e+00,4.849880e+00,4.006470e+00,2.055095e+00,-7.015650e-01,-3.379360e+00,-4.693960e+00,-3.618730e+00,-3.295620e-01,3.280420e+00,4.439570e+00,1.790762e+00,-2.590538e+00,-4.252340e+00,-1.005960e+00,3.470500e+00,3.162013e+00,-1.770607e+00,-3.791740e+00,6.164600e-01,3.761080e+00,-3.525080e-01,-3.565730e+00,9.095500e-01,3.111208e+00,-2.038442e+00},
                {-1.687572e-02,-6.488933e-02,-1.116623e-01,-1.528498e-01,-1.789219e-01,-1.745634e-01,-1.210070e-01,-4.050086e-03,1.719413e-01,3.670238e-01,4.978670e-01,4.579555e-01,1.807245e-01,-2.701365e-01,-6.522333e-01,-6.412967e-01,-1.055341e-01,6.214790e-01,8.438846e-01,1.685551e-01,-8.045631e-01,-8.476480e-01,3.079903e-01,1.120118e+00,1.765522e-01,-1.165514e+00,-4.479009e-01,1.213737e+00,4.549929e-01,-1.357536e+00,-1.313817e-01,1.478862e+00},
                {-3.119148e-02,-7.885917e-02,-1.240277e-01,-1.608102e-01,-1.779381e-01,-1.590116e-01,-8.653801e-02,4.828509e-02,2.305487e-01,4.072787e-01,4.877655e-01,3.766745e-01,4.575547e-02,-3.873735e-01,-6.536107e-01,-4.833633e-01,1.160491e-01,6.969150e-01,6.459144e-01,-1.317601e-01,-8.318319e-01,-4.997270e-01,5.730284e-01,8.461856e-01,-2.524822e-01,-9.693661e-01,8.426091e-02,1.011442e+00,-1.369279e-01,-1.010039e+00,4.220027e-01,8.492094e-01}};
        double[][] resultImag = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {5.512453e-02,1.206353e-01,1.820590e-01,2.301815e-01,2.480208e-01,2.116864e-01,9.710069e-02,-1.050135e-01,-3.670302e-01,-6.052357e-01,-6.850514e-01,-4.763439e-01,3.737619e-02,6.508014e-01,9.540844e-01,5.875239e-01,-3.456385e-01,-1.102881e+00,-8.208195e-01,4.393636e-01,1.308521e+00,5.054767e-01,-1.120762e+00,-1.141871e+00,7.560718e-01,1.448858e+00,-5.700349e-01,-1.569511e+00,7.163400e-01,1.513955e+00,-1.212286e+00,-1.061540e+00},
                {1.300936e-02,2.843562e-02,4.283299e-02,5.398974e-02,5.791769e-02,4.903877e-02,2.184345e-02,-2.556410e-02,-8.644065e-02,-1.410259e-01,-1.581932e-01,-1.085771e-01,1.029820e-02,1.499716e-01,2.167660e-01,1.311177e-01,-7.981779e-02,-2.469196e-01,-1.803027e-01,9.923328e-02,2.861337e-01,1.069066e-01,-2.427352e-01,-2.411924e-01,1.622752e-01,3.010520e-01,-1.209661e-01,-3.189828e-01,1.478136e-01,2.992257e-01,-2.409045e-01,-2.019673e-01}};

        int frameLength = 5;
        int overlap = 2;

        ShortTimeFourier stft = new ShortTimeFourier(signal1, frameLength, overlap);
        stft.transform();
        Complex[][] out = stft.getComplex(true);

        for (int c = 0; c < out[0].length; c++) {
            for (int r = 0; r < out.length; r++) {
                Assertions.assertEquals(resultReal[r][c], out[r][c].getReal(), 0.001);
                Assertions.assertEquals(resultImag[r][c], out[r][c].getImaginary(), 0.001);
            }
        }
    }

    @Test
    public void testSTFTPositive2() {
        // Results calculated with MATLAB R2020b Update 4 9.9.0.1570001
        double[][] resultReal = {{9.613440e-02,4.317170e-01,1.047080e+00,1.910970e+00,2.940520e+00,3.968600e+00,4.723440e+00,4.849880e+00,4.006470e+00,2.055095e+00,-7.015650e-01,-3.379360e+00,-4.693960e+00,-3.618730e+00,-3.295620e-01,3.280420e+00,4.439570e+00,1.790762e+00,-2.590538e+00,-4.252340e+00,-1.005960e+00,3.470500e+00,3.162013e+00,-1.770607e+00,-3.791740e+00,6.164600e-01,3.761080e+00,-3.525080e-01,-3.565730e+00,9.095500e-01,3.111208e+00,-2.038442e+00},
                {-1.687572e-02,-6.488933e-02,-1.116623e-01,-1.528498e-01,-1.789219e-01,-1.745634e-01,-1.210070e-01,-4.050086e-03,1.719413e-01,3.670238e-01,4.978670e-01,4.579555e-01,1.807245e-01,-2.701365e-01,-6.522333e-01,-6.412967e-01,-1.055341e-01,6.214790e-01,8.438846e-01,1.685551e-01,-8.045631e-01,-8.476480e-01,3.079903e-01,1.120118e+00,1.765522e-01,-1.165514e+00,-4.479009e-01,1.213737e+00,4.549929e-01,-1.357536e+00,-1.313817e-01,1.478862e+00},
                {-3.119148e-02,-7.885917e-02,-1.240277e-01,-1.608102e-01,-1.779381e-01,-1.590116e-01,-8.653801e-02,4.828509e-02,2.305487e-01,4.072787e-01,4.877655e-01,3.766745e-01,4.575547e-02,-3.873735e-01,-6.536107e-01,-4.833633e-01,1.160491e-01,6.969150e-01,6.459144e-01,-1.317601e-01,-8.318319e-01,-4.997270e-01,5.730284e-01,8.461856e-01,-2.524822e-01,-9.693661e-01,8.426091e-02,1.011442e+00,-1.369279e-01,-1.010039e+00,4.220027e-01,8.492094e-01}};
        double[][] resultImag = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {5.512453e-02,1.206353e-01,1.820590e-01,2.301815e-01,2.480208e-01,2.116864e-01,9.710069e-02,-1.050135e-01,-3.670302e-01,-6.052357e-01,-6.850514e-01,-4.763439e-01,3.737619e-02,6.508014e-01,9.540844e-01,5.875239e-01,-3.456385e-01,-1.102881e+00,-8.208195e-01,4.393636e-01,1.308521e+00,5.054767e-01,-1.120762e+00,-1.141871e+00,7.560718e-01,1.448858e+00,-5.700349e-01,-1.569511e+00,7.163400e-01,1.513955e+00,-1.212286e+00,-1.061540e+00},
                {1.300936e-02,2.843562e-02,4.283299e-02,5.398974e-02,5.791769e-02,4.903877e-02,2.184345e-02,-2.556410e-02,-8.644065e-02,-1.410259e-01,-1.581932e-01,-1.085771e-01,1.029820e-02,1.499716e-01,2.167660e-01,1.311177e-01,-7.981779e-02,-2.469196e-01,-1.803027e-01,9.923328e-02,2.861337e-01,1.069066e-01,-2.427352e-01,-2.411924e-01,1.622752e-01,3.010520e-01,-1.209661e-01,-3.189828e-01,1.478136e-01,2.992257e-01,-2.409045e-01,-2.019673e-01}};

        int frameLength = 5;
        int overlap = 2;

        ShortTimeFourier stft = new ShortTimeFourier(signal2, frameLength, overlap);
        stft.transform();
        Complex[][] out = stft.getComplex(true);

        for (int c = 0; c < out[0].length; c++) {
            for (int r = 0; r < out.length; r++) {
                Assertions.assertEquals(resultReal[r][c], out[r][c].getReal(), 0.001);
                Assertions.assertEquals(resultImag[r][c], out[r][c].getImaginary(), 0.001);
            }
        }
    }

    @Test
    public void testSTFTPositiveHanning2() {
        // Results calculated with MATLAB R2020b Update 4 9.9.0.1570001
        //      STFT result with Hanning window
        double[][] resultReal = {{2.884570e-02,1.632510e-01,4.102850e-01,7.584200e-01,1.175675e+00,1.596045e+00,1.910295e+00,1.973270e+00,1.641875e+00,8.522050e-01,-2.806675e-01,-1.398130e+00,-1.963815e+00,-1.531605e+00,-1.488520e-01,1.401120e+00,1.923850e+00,7.909860e-01,-1.138920e+00,-1.903460e+00,-4.631350e-01,1.587670e+00,1.475165e+00,-8.288486e-01,-1.818350e+00,2.933800e-01,1.862805e+00,-1.714030e-01,-1.831990e+00,4.708300e-01,1.665700e+00,-1.109751e+00},
                {-2.154479e-02,-1.034154e-01,-2.444861e-01,-4.374396e-01,-6.629119e-01,-8.822842e-01,-1.033592e+00,-1.037498e+00,-8.207788e-01,-3.607519e-01,2.612682e-01,8.323611e-01,1.058867e+00,7.278064e-01,-7.463959e-02,-8.658167e-01,-1.004359e+00,-2.558429e-01,7.714940e-01,9.935091e-01,4.121927e-02,-9.861550e-01,-6.520424e-01,6.714486e-01,9.229040e-01,-4.212884e-01,-9.956074e-01,3.758533e-01,9.678937e-01,-5.515941e-01,-7.956845e-01,8.707611e-01},
                {7.121938e-03,2.178989e-02,3.934360e-02,5.822959e-02,7.507439e-02,8.426174e-02,7.844412e-02,5.086318e-02,-1.586614e-04,-6.535057e-02,-1.209345e-01,-1.332961e-01,-7.696000e-02,3.799615e-02,1.490656e-01,1.652567e-01,4.243393e-02,-1.396501e-01,-2.020340e-01,-4.177915e-02,1.903482e-01,1.923200e-01,-8.554013e-02,-2.570243e-01,-1.372899e-02,2.745984e-01,6.420493e-02,-2.901518e-01,-5.189867e-02,3.161791e-01,-3.716551e-02,-3.158856e-01}};
        double[][] resultImag = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {-5.832141e-04,-3.759031e-02,-1.186688e-01,-2.412418e-01,-3.965870e-01,-5.645285e-01,-7.086219e-01,-7.758403e-01,-7.063347e-01,-4.584513e-01,-4.717547e-02,4.203105e-01,7.464768e-01,7.206177e-01,2.720860e-01,-3.861680e-01,-7.896988e-01,-5.439877e-01,2.269081e-01,7.933719e-01,4.717681e-01,-4.512748e-01,-7.888305e-01,2.329592e-02,8.174400e-01,2.439655e-01,-7.793730e-01,-3.207132e-01,7.941698e-01,2.127854e-01,-8.506664e-01,1.003125e-01},
                {-2.464685e-03,6.312688e-03,2.568667e-02,5.530862e-02,9.344685e-02,1.355700e-01,1.729406e-01,1.922244e-01,1.775019e-01,1.165720e-01,1.127268e-02,-1.118206e-01,-1.999100e-01,-1.934562e-01,-6.921182e-02,1.156121e-01,2.276630e-01,1.496305e-01,-8.199621e-02,-2.443456e-01,-1.290490e-01,1.627833e-01,2.465674e-01,-3.939776e-02,-2.799605e-01,-4.487184e-02,2.882477e-01,6.777151e-02,-3.068942e-01,-1.963251e-02,3.266402e-01,-1.108638e-01}};

        int frameLength = 5;
        int overlap = 2;
        _Window window = new Hanning(frameLength);

        ShortTimeFourier stft = new ShortTimeFourier(signal2, frameLength, overlap, window);
        stft.transform();
        Complex[][] out = stft.getComplex(true);

        for (int c = 0; c < out[0].length; c++) {
            for (int r = 0; r < out.length; r++) {
                Assertions.assertEquals(resultReal[r][c], out[r][c].getReal(), 0.001);
                Assertions.assertEquals(resultImag[r][c], out[r][c].getImaginary(), 0.001);
            }
        }
    }

    @Test
    public void testSTFTZeroPad1() {
        // Results calculated with MATLAB R2020b Update 4 9.9.0.1570001
        //     Zero padded with 5 samples
        double[][] resultReal = {{9.613440e-02,4.317170e-01,1.047080e+00,1.910970e+00,2.940520e+00,3.968600e+00,4.723440e+00,4.849880e+00,4.006470e+00,2.055095e+00,-7.015650e-01,-3.379360e+00,-4.693960e+00,-3.618730e+00,-3.295620e-01,3.280420e+00,4.439570e+00,1.790762e+00,-2.590538e+00,-4.252340e+00,-1.005960e+00,3.470500e+00,3.162013e+00,-1.770607e+00,-3.791740e+00,6.164600e-01,3.761080e+00,-3.525080e-01,-3.565730e+00,9.095500e-01,3.111208e+00,-2.038442e+00},
                {-4.383160e-02,-6.707271e-02,-2.960272e-02,7.375233e-02,2.482386e-01,4.921037e-01,7.846174e-01,1.071284e+00,1.254104e+00,1.201723e+00,7.981449e-01,3.618117e-02,-8.781339e-01,-1.503701e+00,-1.345658e+00,-2.598473e-01,1.166696e+00,1.760511e+00,7.285281e-01,-1.184457e+00,-1.892910e+00,-2.449739e-01,1.872808e+00,1.336235e+00,-1.387554e+00,-1.876762e+00,1.058046e+00,2.060076e+00,-1.152422e+00,-1.960486e+00,1.695857e+00,1.360555e+00},
                {-1.687572e-02,-6.488933e-02,-1.116623e-01,-1.528498e-01,-1.789219e-01,-1.745634e-01,-1.210070e-01,-4.050086e-03,1.719413e-01,3.670238e-01,4.978670e-01,4.579555e-01,1.807245e-01,-2.701365e-01,-6.522333e-01,-6.412967e-01,-1.055341e-01,6.214790e-01,8.438846e-01,1.685551e-01,-8.045631e-01,-8.476480e-01,3.079903e-01,1.120118e+00,1.765522e-01,-1.165514e+00,-4.479009e-01,1.213737e+00,4.549929e-01,-1.357536e+00,-1.313817e-01,1.478862e+00},
                {2.781380e-02,8.972821e-02,2.070627e-01,3.730277e-01,5.707914e-01,7.675313e-01,9.111676e-01,9.350513e-01,7.770163e-01,4.145096e-01,-9.334743e-02,-5.841712e-01,-8.300361e-01,-6.566787e-01,-1.029055e-01,5.062073e-01,7.168994e-01,3.227550e-01,-3.426491e-01,-6.119678e-01,-1.848555e-01,4.160189e-01,4.090808e-01,-1.570482e-01,-3.996364e-01,1.960227e-02,3.127643e-01,3.472801e-03,-2.144926e-01,2.607067e-02,1.055636e-01,-3.490585e-02},
                {-3.119148e-02,-7.885917e-02,-1.240277e-01,-1.608102e-01,-1.779381e-01,-1.590116e-01,-8.653801e-02,4.828509e-02,2.305487e-01,4.072787e-01,4.877655e-01,3.766745e-01,4.575547e-02,-3.873735e-01,-6.536107e-01,-4.833633e-01,1.160491e-01,6.969150e-01,6.459144e-01,-1.317601e-01,-8.318319e-01,-4.997270e-01,5.730284e-01,8.461856e-01,-2.524822e-01,-9.693661e-01,8.426091e-02,1.011442e+00,-1.369279e-01,-1.010039e+00,4.220027e-01,8.492094e-01},
                {3.203560e-02,9.890900e-02,2.207800e-01,3.900900e-01,5.887400e-01,7.821800e-01,9.167800e-01,9.256800e-01,7.492100e-01,3.712350e-01,-1.398950e-01,-6.141200e-01,-8.246600e-01,-6.129900e-01,-4.412200e-02,5.383800e-01,6.934100e-01,2.610180e-01,-3.826980e-01,-5.859000e-01,-1.232200e-01,4.336600e-01,3.602727e-01,-1.963727e-01,-3.692200e-01,6.102000e-02,2.921800e-01,-2.924800e-02,-1.957700e-01,4.323000e-02,8.960800e-02,-3.359800e-02},
                {-3.119148e-02,-7.885917e-02,-1.240277e-01,-1.608102e-01,-1.779381e-01,-1.590116e-01,-8.653801e-02,4.828509e-02,2.305487e-01,4.072787e-01,4.877655e-01,3.766745e-01,4.575547e-02,-3.873735e-01,-6.536107e-01,-4.833633e-01,1.160491e-01,6.969150e-01,6.459144e-01,-1.317601e-01,-8.318319e-01,-4.997270e-01,5.730284e-01,8.461856e-01,-2.524822e-01,-9.693661e-01,8.426091e-02,1.011442e+00,-1.369279e-01,-1.010039e+00,4.220027e-01,8.492094e-01},
                {2.781380e-02,8.972821e-02,2.070627e-01,3.730277e-01,5.707914e-01,7.675313e-01,9.111676e-01,9.350513e-01,7.770163e-01,4.145096e-01,-9.334743e-02,-5.841712e-01,-8.300361e-01,-6.566787e-01,-1.029055e-01,5.062073e-01,7.168994e-01,3.227550e-01,-3.426491e-01,-6.119678e-01,-1.848555e-01,4.160189e-01,4.090808e-01,-1.570482e-01,-3.996364e-01,1.960227e-02,3.127643e-01,3.472801e-03,-2.144926e-01,2.607067e-02,1.055636e-01,-3.490585e-02},
                {-1.687572e-02,-6.488933e-02,-1.116623e-01,-1.528498e-01,-1.789219e-01,-1.745634e-01,-1.210070e-01,-4.050086e-03,1.719413e-01,3.670238e-01,4.978670e-01,4.579555e-01,1.807245e-01,-2.701365e-01,-6.522333e-01,-6.412967e-01,-1.055341e-01,6.214790e-01,8.438846e-01,1.685551e-01,-8.045631e-01,-8.476480e-01,3.079903e-01,1.120118e+00,1.765522e-01,-1.165514e+00,-4.479009e-01,1.213737e+00,4.549929e-01,-1.357536e+00,-1.313817e-01,1.478862e+00},
                {-4.383160e-02,-6.707271e-02,-2.960272e-02,7.375233e-02,2.482386e-01,4.921037e-01,7.846174e-01,1.071284e+00,1.254104e+00,1.201723e+00,7.981449e-01,3.618117e-02,-8.781339e-01,-1.503701e+00,-1.345658e+00,-2.598473e-01,1.166696e+00,1.760511e+00,7.285281e-01,-1.184457e+00,-1.892910e+00,-2.449739e-01,1.872808e+00,1.336235e+00,-1.387554e+00,-1.876762e+00,1.058046e+00,2.060076e+00,-1.152422e+00,-1.960486e+00,1.695857e+00,1.360555e+00}};
        double[][] resultImag = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {-7.164208e-02,-3.077094e-01,-7.150452e-01,-1.271514e+00,-1.919988e+00,-2.548009e+00,-2.976926e+00,-2.980167e+00,-2.351777e+00,-1.033220e+00,7.368266e-01,2.350198e+00,2.980935e+00,2.044147e+00,-1.988162e-01,-2.391012e+00,-2.765480e+00,-7.087751e-01,2.085246e+00,2.677585e+00,1.200048e-01,-2.607423e+00,-1.718243e+00,1.739543e+00,2.380287e+00,-1.068368e+00,-2.513455e+00,9.346861e-01,2.388891e+00,-1.344980e+00,-1.915522e+00,2.073536e+00},
                {5.512453e-02,1.206353e-01,1.820590e-01,2.301815e-01,2.480208e-01,2.116864e-01,9.710069e-02,-1.050135e-01,-3.670302e-01,-6.052357e-01,-6.850514e-01,-4.763439e-01,3.737619e-02,6.508014e-01,9.540844e-01,5.875239e-01,-3.456385e-01,-1.102881e+00,-8.208195e-01,4.393636e-01,1.308521e+00,5.054767e-01,-1.120762e+00,-1.141871e+00,7.560718e-01,1.448858e+00,-5.700349e-01,-1.569511e+00,7.163400e-01,1.513955e+00,-1.212286e+00,-1.061540e+00},
                {-2.731341e-02,-8.279001e-02,-1.777833e-01,-3.059472e-01,-4.525329e-01,-5.902043e-01,-6.777138e-01,-6.654984e-01,-5.125985e-01,-2.146634e-01,1.666020e-01,4.957523e-01,6.056426e-01,3.973799e-01,-4.793488e-02,-4.496959e-01,-4.918518e-01,-1.125117e-01,3.484261e-01,4.139003e-01,8.517313e-03,-3.627496e-01,-2.130608e-01,2.116267e-01,2.501979e-01,-1.096978e-01,-2.067080e-01,7.367365e-02,1.338852e-01,-6.503604e-02,-5.013603e-02,3.202630e-02},
                {1.300936e-02,2.843562e-02,4.283299e-02,5.398974e-02,5.791769e-02,4.903877e-02,2.184345e-02,-2.556410e-02,-8.644065e-02,-1.410259e-01,-1.581932e-01,-1.085771e-01,1.029820e-02,1.499716e-01,2.167660e-01,1.311177e-01,-7.981779e-02,-2.469196e-01,-1.803027e-01,9.923328e-02,2.861337e-01,1.069066e-01,-2.427352e-01,-2.411924e-01,1.622752e-01,3.010520e-01,-1.209661e-01,-3.189828e-01,1.478136e-01,2.992257e-01,-2.409045e-01,-2.019673e-01},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {-1.300936e-02,-2.843562e-02,-4.283299e-02,-5.398974e-02,-5.791769e-02,-4.903877e-02,-2.184345e-02,2.556410e-02,8.644065e-02,1.410259e-01,1.581932e-01,1.085771e-01,-1.029820e-02,-1.499716e-01,-2.167660e-01,-1.311177e-01,7.981779e-02,2.469196e-01,1.803027e-01,-9.923328e-02,-2.861337e-01,-1.069066e-01,2.427352e-01,2.411924e-01,-1.622752e-01,-3.010520e-01,1.209661e-01,3.189828e-01,-1.478136e-01,-2.992257e-01,2.409045e-01,2.019673e-01},
                {2.731341e-02,8.279001e-02,1.777833e-01,3.059472e-01,4.525329e-01,5.902043e-01,6.777138e-01,6.654984e-01,5.125985e-01,2.146634e-01,-1.666020e-01,-4.957523e-01,-6.056426e-01,-3.973799e-01,4.793488e-02,4.496959e-01,4.918518e-01,1.125117e-01,-3.484261e-01,-4.139003e-01,-8.517313e-03,3.627496e-01,2.130608e-01,-2.116267e-01,-2.501979e-01,1.096978e-01,2.067080e-01,-7.367365e-02,-1.338852e-01,6.503604e-02,5.013603e-02,-3.202630e-02},
                {-5.512453e-02,-1.206353e-01,-1.820590e-01,-2.301815e-01,-2.480208e-01,-2.116864e-01,-9.710069e-02,1.050135e-01,3.670302e-01,6.052357e-01,6.850514e-01,4.763439e-01,-3.737619e-02,-6.508014e-01,-9.540844e-01,-5.875239e-01,3.456385e-01,1.102881e+00,8.208195e-01,-4.393636e-01,-1.308521e+00,-5.054767e-01,1.120762e+00,1.141871e+00,-7.560718e-01,-1.448858e+00,5.700349e-01,1.569511e+00,-7.163400e-01,-1.513955e+00,1.212286e+00,1.061540e+00},
                {7.164208e-02,3.077094e-01,7.150452e-01,1.271514e+00,1.919988e+00,2.548009e+00,2.976926e+00,2.980167e+00,2.351777e+00,1.033220e+00,-7.368266e-01,-2.350198e+00,-2.980935e+00,-2.044147e+00,1.988162e-01,2.391012e+00,2.765480e+00,7.087751e-01,-2.085246e+00,-2.677585e+00,-1.200048e-01,2.607423e+00,1.718243e+00,-1.739543e+00,-2.380287e+00,1.068368e+00,2.513455e+00,-9.346861e-01,-2.388891e+00,1.344980e+00,1.915522e+00,-2.073536e+00}};
        int frameLength = 5;
        int overlap = 2;
        int fourierLength = 10;

        ShortTimeFourier stft = new ShortTimeFourier(signal1, frameLength, overlap, fourierLength);
        stft.transform();
        Complex[][] out = stft.getComplex(false);

        for (int c = 0; c < out[0].length; c++) {
            for (int r = 0; r < out.length; r++) {
                Assertions.assertEquals(resultReal[r][c], out[r][c].getReal(), 0.001, String.format("Real - Row: %d, Column: %d", r, c));
                Assertions.assertEquals(resultImag[r][c], out[r][c].getImaginary(), 0.001, String.format("Imaginary - Row: %d, Column: %d", r, c));
            }
        }
    }


    @Test
    public void testSpectrogram1() {
        // Results calculated with MATLAB R2020b Update 4 9.9.0.1570001
        double[][] result = {{9.241823e-03,1.863796e-01,1.096377e+00,3.651806e+00,8.646658e+00,1.574979e+01,2.231089e+01,2.352134e+01,1.605180e+01,4.223415e+00,4.921934e-01,1.142007e+01,2.203326e+01,1.309521e+01,1.086111e-01,1.076116e+01,1.970978e+01,3.206829e+00,6.710887e+00,1.808240e+01,1.011956e+00,1.204437e+01,9.998324e+00,3.135050e+00,1.437729e+01,3.800229e-01,1.414572e+01,1.242619e-01,1.271443e+01,8.272812e-01,9.679615e+00,4.155246e+00},
                {3.323504e-03,1.876349e-02,4.561394e-02,7.634659e-02,9.352740e-02,7.528352e-02,2.407124e-02,1.104424e-02,1.642750e-01,5.010167e-01,7.171670e-01,4.366268e-01,3.405834e-02,4.965162e-01,1.335685e+00,7.564458e-01,1.306034e-01,1.602582e+00,1.385886e+00,2.214512e-01,2.359549e+00,9.740138e-01,1.350965e+00,2.558534e+00,6.028153e-01,3.457613e+00,5.255550e-01,3.936524e+00,7.201615e-01,4.134963e+00,1.486898e+00,3.313898e+00},
                {1.142152e-03,7.027353e-03,1.721754e-02,2.877481e-02,3.501641e-02,2.768948e-02,7.965963e-03,2.984973e-03,6.062467e-02,1.857642e-01,2.629403e-01,1.536726e-01,2.199616e-03,1.725497e-01,4.741945e-01,2.508319e-01,1.983827e-02,5.466598e-01,4.497144e-01,2.720796e-02,7.738168e-01,2.611561e-01,3.872819e-01,7.742038e-01,9.008049e-02,1.030303e+00,2.173270e-02,1.124765e+00,4.059810e-02,1.109716e+00,2.361212e-01,7.619474e-01},
                {1.142152e-03,7.027353e-03,1.721754e-02,2.877481e-02,3.501641e-02,2.768948e-02,7.965963e-03,2.984973e-03,6.062467e-02,1.857642e-01,2.629403e-01,1.536726e-01,2.199616e-03,1.725497e-01,4.741945e-01,2.508319e-01,1.983827e-02,5.466598e-01,4.497144e-01,2.720796e-02,7.738168e-01,2.611561e-01,3.872819e-01,7.742038e-01,9.008049e-02,1.030303e+00,2.173270e-02,1.124765e+00,4.059810e-02,1.109716e+00,2.361212e-01,7.619474e-01},
                {3.323504e-03,1.876349e-02,4.561394e-02,7.634659e-02,9.352740e-02,7.528352e-02,2.407124e-02,1.104424e-02,1.642750e-01,5.010167e-01,7.171670e-01,4.366268e-01,3.405834e-02,4.965162e-01,1.335685e+00,7.564458e-01,1.306034e-01,1.602582e+00,1.385886e+00,2.214512e-01,2.359549e+00,9.740138e-01,1.350965e+00,2.558534e+00,6.028153e-01,3.457613e+00,5.255550e-01,3.936524e+00,7.201615e-01,4.134963e+00,1.486898e+00,3.313898e+00}};

        int frameLength = 5;
        int overlap = 2;

        ShortTimeFourier stft = new ShortTimeFourier(signal1, frameLength, overlap);
        stft.transform();
        double[][] out = stft.spectrogram(false);

        for (int i = 0; i < result.length; i++) {
            Assertions.assertArrayEquals(result[i], out[i], 0.001);
        }
    }

    @Test
    public void testSpectrogram2() {
        // Results calculated with MATLAB R2020b Update 4 9.9.0.1570001
        double[][] result = {{9.241823e-03,1.863796e-01,1.096377e+00,3.651806e+00,8.646658e+00,1.574979e+01,2.231089e+01,2.352134e+01,1.605180e+01,4.223415e+00,4.921934e-01,1.142007e+01,2.203326e+01,1.309521e+01,1.086111e-01,1.076116e+01,1.970978e+01,3.206829e+00,6.710887e+00,1.808240e+01,1.011956e+00,1.204437e+01,9.998324e+00,3.135050e+00,1.437729e+01,3.800229e-01,1.414572e+01,1.242619e-01,1.271443e+01,8.272812e-01,9.679615e+00,4.155246e+00},
                {3.323504e-03,1.876349e-02,4.561394e-02,7.634659e-02,9.352740e-02,7.528352e-02,2.407124e-02,1.104424e-02,1.642750e-01,5.010167e-01,7.171670e-01,4.366268e-01,3.405834e-02,4.965162e-01,1.335685e+00,7.564458e-01,1.306034e-01,1.602582e+00,1.385886e+00,2.214512e-01,2.359549e+00,9.740138e-01,1.350965e+00,2.558534e+00,6.028153e-01,3.457613e+00,5.255550e-01,3.936524e+00,7.201615e-01,4.134963e+00,1.486898e+00,3.313898e+00},
                {1.142152e-03,7.027353e-03,1.721754e-02,2.877481e-02,3.501641e-02,2.768948e-02,7.965963e-03,2.984973e-03,6.062467e-02,1.857642e-01,2.629403e-01,1.536726e-01,2.199616e-03,1.725497e-01,4.741945e-01,2.508319e-01,1.983827e-02,5.466598e-01,4.497144e-01,2.720796e-02,7.738168e-01,2.611561e-01,3.872819e-01,7.742038e-01,9.008049e-02,1.030303e+00,2.173270e-02,1.124765e+00,4.059810e-02,1.109716e+00,2.361212e-01,7.619474e-01},
                {1.142152e-03,7.027353e-03,1.721754e-02,2.877481e-02,3.501641e-02,2.768948e-02,7.965963e-03,2.984973e-03,6.062467e-02,1.857642e-01,2.629403e-01,1.536726e-01,2.199616e-03,1.725497e-01,4.741945e-01,2.508319e-01,1.983827e-02,5.466598e-01,4.497144e-01,2.720796e-02,7.738168e-01,2.611561e-01,3.872819e-01,7.742038e-01,9.008049e-02,1.030303e+00,2.173270e-02,1.124765e+00,4.059810e-02,1.109716e+00,2.361212e-01,7.619474e-01},
                {3.323504e-03,1.876349e-02,4.561394e-02,7.634659e-02,9.352740e-02,7.528352e-02,2.407124e-02,1.104424e-02,1.642750e-01,5.010167e-01,7.171670e-01,4.366268e-01,3.405834e-02,4.965162e-01,1.335685e+00,7.564458e-01,1.306034e-01,1.602582e+00,1.385886e+00,2.214512e-01,2.359549e+00,9.740138e-01,1.350965e+00,2.558534e+00,6.028153e-01,3.457613e+00,5.255550e-01,3.936524e+00,7.201615e-01,4.134963e+00,1.486898e+00,3.313898e+00}};

        int frameLength = 5;
        int overlap = 2;

        ShortTimeFourier stft = new ShortTimeFourier(signal2, frameLength, overlap);
        stft.transform();
        double[][] out = stft.spectrogram(false);

        for (int i = 0; i < result.length; i++) {
            Assertions.assertArrayEquals(result[i], out[i], 0.001);
        }
    }

    @Test
    public void testSpectrogramPositive1() {
        // Results calculated with MATLAB R2020b Update 4 9.9.0.1570001
        double[][] result = {{9.241823e-03,1.863796e-01,1.096377e+00,3.651806e+00,8.646658e+00,1.574979e+01,2.231089e+01,2.352134e+01,1.605180e+01,4.223415e+00,4.921934e-01,1.142007e+01,2.203326e+01,1.309521e+01,1.086111e-01,1.076116e+01,1.970978e+01,3.206829e+00,6.710887e+00,1.808240e+01,1.011956e+00,1.204437e+01,9.998324e+00,3.135050e+00,1.437729e+01,3.800229e-01,1.414572e+01,1.242619e-01,1.271443e+01,8.272812e-01,9.679615e+00,4.155246e+00},
                {3.323504e-03,1.876349e-02,4.561394e-02,7.634659e-02,9.352740e-02,7.528352e-02,2.407124e-02,1.104424e-02,1.642750e-01,5.010167e-01,7.171670e-01,4.366268e-01,3.405834e-02,4.965162e-01,1.335685e+00,7.564458e-01,1.306034e-01,1.602582e+00,1.385886e+00,2.214512e-01,2.359549e+00,9.740138e-01,1.350965e+00,2.558534e+00,6.028153e-01,3.457613e+00,5.255550e-01,3.936524e+00,7.201615e-01,4.134963e+00,1.486898e+00,3.313898e+00},
                {1.142152e-03,7.027353e-03,1.721754e-02,2.877481e-02,3.501641e-02,2.768948e-02,7.965963e-03,2.984973e-03,6.062467e-02,1.857642e-01,2.629403e-01,1.536726e-01,2.199616e-03,1.725497e-01,4.741945e-01,2.508319e-01,1.983827e-02,5.466598e-01,4.497144e-01,2.720796e-02,7.738168e-01,2.611561e-01,3.872819e-01,7.742038e-01,9.008049e-02,1.030303e+00,2.173270e-02,1.124765e+00,4.059810e-02,1.109716e+00,2.361212e-01,7.619474e-01}};

        int frameLength = 5;
        int overlap = 2;

        ShortTimeFourier stft = new ShortTimeFourier(signal1, frameLength, overlap);
        stft.transform();
        double[][] out = stft.spectrogram(true);

        for (int i = 0; i < result.length; i++) {
            Assertions.assertArrayEquals(result[i], out[i], 0.001);
        }
    }

    @Test
    public void testSpectrogramPositive2() {
        // Results calculated with MATLAB R2020b Update 4 9.9.0.1570001
        double[][] result = {{9.241823e-03,1.863796e-01,1.096377e+00,3.651806e+00,8.646658e+00,1.574979e+01,2.231089e+01,2.352134e+01,1.605180e+01,4.223415e+00,4.921934e-01,1.142007e+01,2.203326e+01,1.309521e+01,1.086111e-01,1.076116e+01,1.970978e+01,3.206829e+00,6.710887e+00,1.808240e+01,1.011956e+00,1.204437e+01,9.998324e+00,3.135050e+00,1.437729e+01,3.800229e-01,1.414572e+01,1.242619e-01,1.271443e+01,8.272812e-01,9.679615e+00,4.155246e+00},
                {3.323504e-03,1.876349e-02,4.561394e-02,7.634659e-02,9.352740e-02,7.528352e-02,2.407124e-02,1.104424e-02,1.642750e-01,5.010167e-01,7.171670e-01,4.366268e-01,3.405834e-02,4.965162e-01,1.335685e+00,7.564458e-01,1.306034e-01,1.602582e+00,1.385886e+00,2.214512e-01,2.359549e+00,9.740138e-01,1.350965e+00,2.558534e+00,6.028153e-01,3.457613e+00,5.255550e-01,3.936524e+00,7.201615e-01,4.134963e+00,1.486898e+00,3.313898e+00},
                {1.142152e-03,7.027353e-03,1.721754e-02,2.877481e-02,3.501641e-02,2.768948e-02,7.965963e-03,2.984973e-03,6.062467e-02,1.857642e-01,2.629403e-01,1.536726e-01,2.199616e-03,1.725497e-01,4.741945e-01,2.508319e-01,1.983827e-02,5.466598e-01,4.497144e-01,2.720796e-02,7.738168e-01,2.611561e-01,3.872819e-01,7.742038e-01,9.008049e-02,1.030303e+00,2.173270e-02,1.124765e+00,4.059810e-02,1.109716e+00,2.361212e-01,7.619474e-01}};

        int frameLength = 5;
        int overlap = 2;

        ShortTimeFourier stft = new ShortTimeFourier(signal2, frameLength, overlap);
        stft.transform();
        double[][] out = stft.spectrogram(true);

        for (int i = 0; i < result.length; i++) {
            Assertions.assertArrayEquals(result[i], out[i], 0.001);
        }
    }

    @Test
    public void testFrequencyAxis1() {
        double[] result = {0,20,40,60,80};

        int frameLength = 5;
        int overlap = 2;
        double Fs = 100;
        _Window window = new Rectangular(frameLength);

        ShortTimeFourier stft = new ShortTimeFourier(signal1, frameLength, overlap, frameLength, window, Fs);
        stft.transform();
        double[] out = stft.getFrequencyAxis(false);

        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void testFrequencyAxis2() {
        double[] result = {0,20,40,60,80};

        int frameLength = 5;
        int overlap = 2;
        double Fs = 100;
        _Window window = new Rectangular(frameLength);

        ShortTimeFourier stft = new ShortTimeFourier(signal2, frameLength, overlap, frameLength, window, Fs);
        stft.transform();
        double[] out = stft.getFrequencyAxis(false);

        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void testFrequencyAxisPositive1() {
        double[] result = {0,20,40};

        int frameLength = 5;
        int overlap = 2;
        double Fs = 100;
        _Window window = new Rectangular(frameLength);

        ShortTimeFourier stft = new ShortTimeFourier(signal1, frameLength, overlap, frameLength, window, Fs);
        stft.transform();
        double[] out = stft.getFrequencyAxis(true);

        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void testFrequencyAxisPositive2() {
        double[] result = {0,20,40};

        int frameLength = 5;
        int overlap = 2;
        double Fs = 100;
        _Window window = new Rectangular(frameLength);

        ShortTimeFourier stft = new ShortTimeFourier(signal2, frameLength, overlap, frameLength, window, Fs);
        stft.transform();
        double[] out = stft.getFrequencyAxis(true);

        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void testTimeAxis1() {
        double[] result = {0,3.000000e-02,6.000000e-02,9.000000e-02,1.200000e-01,1.500000e-01,1.800000e-01,2.100000e-01,2.400000e-01,2.700000e-01,3.000000e-01,3.300000e-01,3.600000e-01,3.900000e-01,4.200000e-01,4.500000e-01,4.800000e-01,5.100000e-01,5.400000e-01,5.700000e-01,6.000000e-01,6.300000e-01,6.600000e-01,6.900000e-01,7.200000e-01,7.500000e-01,7.800000e-01,8.100000e-01,8.400000e-01,8.700000e-01,9.000000e-01,9.300000e-01};

        int frameLength = 5;
        int overlap = 2;
        double Fs = 100;
        _Window window = new Rectangular(frameLength);

        ShortTimeFourier stft = new ShortTimeFourier(signal1, frameLength, overlap, frameLength, window, Fs);
        stft.transform();
        double[] out = stft.getTimeAxis();

        Assertions.assertArrayEquals(result, out, 0.001);
    }

    @Test
    public void testTimeAxis2() {
        double[] result = {0,3.000000e-02,6.000000e-02,9.000000e-02,1.200000e-01,1.500000e-01,1.800000e-01,2.100000e-01,2.400000e-01,2.700000e-01,3.000000e-01,3.300000e-01,3.600000e-01,3.900000e-01,4.200000e-01,4.500000e-01,4.800000e-01,5.100000e-01,5.400000e-01,5.700000e-01,6.000000e-01,6.300000e-01,6.600000e-01,6.900000e-01,7.200000e-01,7.500000e-01,7.800000e-01,8.100000e-01,8.400000e-01,8.700000e-01,9.000000e-01,9.300000e-01};

        int frameLength = 5;
        int overlap = 2;
        double Fs = 100;
        _Window window = new Rectangular(frameLength);

        ShortTimeFourier stft = new ShortTimeFourier(signal2, frameLength, overlap, frameLength, window, Fs);
        stft.transform();
        double[] out = stft.getTimeAxis();

        Assertions.assertArrayEquals(result, out, 0.001);
    }
}
